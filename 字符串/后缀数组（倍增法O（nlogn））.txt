//洛谷p3809
/*读入一个长度为n的由大小写英文字母或数字组成的字符串，请把这个字符串的所有非空后缀按字典序从小到大排序，然后按顺序输出后缀的第一个字符在原串中的位置。位置编号为1到n。
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
const int N = 1e6 + 10;
using namespace std;
char s[N];
int len, M, rk[N], sa[N], tax[N], tp[N];
/*
sa[i]：排名为i的后缀的位置
rk[i]：从第i个位置开始的后缀的排名，把从第i个位置开始的后缀简称为后缀i
tp[i]：基数排序的第二关键字，意义与sa一样，即第二关键字排名为i的后缀的位置
tax[i]：i号元素出现了多少次。辅助基数排序
s：字符串，s[i]表示字符串中第i个字符串
*/
void debug() //调试
{
    printf("*****************\n");
    printf("下标");
    for (int i = 1; i <= len; i++) printf("%d ", i);
    printf("\n");
    printf("sa  ");
    for (int i = 1; i <= len; i++) printf("%d ", sa[i]);
    printf("\n");
    printf("rak ");
    for (int i = 1; i <= len; i++) printf("%d ", rk[i]);
    printf("\n");
    printf("tp  ");
    for (int i = 1; i <= len; i++) printf("%d ", tp[i]);
    printf("\n");
}
void jsort() //基数排序
{
    for (int i = 0; i <= M; i++) tax[i] = 0;
    for (int i = 1; i <= len; i++) tax[rk[i]]++;
    for (int i = 1; i <= M; i++) tax[i] += tax[i - 1];
    for (int i = len; i >= 1; i--) sa[ tax[rk[tp[i]]]-- ] = tp[i];
}
void suffixSort() //后缀排序
{
    M = 75; //字符集的大小
    for (int i = 1; i <= len; i++) rk[i] = s[i] - '0' + 1, tp[i] = i;
    jsort();
   // Debug();
    for (int w = 1, p = 0; p < len; M = p, w <<= 1)
    {
        //w:当前倍增的长度，w = x表示已经求出了长度为x的后缀的排名，现在要更新长度为2x的后缀的排名
        //p表示不同的后缀的个数，很显然原字符串的后缀都是不同的，因此p = N时可以退出循环
        p = 0;//这里的p仅仅是一个计数器000
        for (int i = 1; i <= w; i++) tp[++p] = len - w + i;
        for (int i = 1; i <= len; i++) if (sa[i] > w) tp[++p] = sa[i] - w; //这两句是后缀数组的核心部分，我已经画图说明
        jsort();//此时我们已经更新出了第二关键字，利用上一轮的rak更新本轮的sa
        swap(tp, rk);//这里原本tp已经没有用了
        rk[sa[1]] = p = 1;
        for (int i = 2; i <= len; i++)
            rk[sa[i]] = (tp[sa[i - 1]] == tp[sa[i]] && tp[sa[i - 1] + w] == tp[sa[i] + w]) ? p : ++p;
        //这里当两个后缀上一轮排名相同时本轮也相同
        //Debug();
    }
  //  for (int i = 1; i <= len; i++)
  //      printf("%d ", sa[i]);
}
//i号后缀：从i开始的后缀
//lcp(x,y):字符串x与字符串y的最长公共前缀，在这里指x号后缀与与y号后缀的最长公共前缀
int height[N];//lcp(sa[i],sa[i-1])，即排名为i的后缀与排名为i-1的后缀的最长公共前缀
int h[N];//height[rak[i]]，即i号后缀与它前一名的后缀的最长公共前缀
//性质：H[i]>=H[i-1]-1
void getHeight()
{
    int j, k = 0;
    for(int i = 1; i <= len; i++)
    {
        if(k) k--;
        int j = sa[rk[i] - 1];
        while(s[i + k] == s[j + k]) k++;
        h[i]=height[rk[i]] = k;
        //printf("%d\n", k);
    }
}
/*
两个后缀的最大公共前缀lcp(x,y)=min(height[rank[x+1]~rank[y]])， 用rmq维护，O(1)查询
可重叠最长重复子串:height数组里的最大值
本质不同的子串的数量:枚举每一个后缀，第i个后缀对答案的贡献为len-sa[i]+1-height[i]
*/
int main()
{
    scanf("%s", s + 1);
    len = strlen(s + 1);
    suffixSort();
    return 0;
}
