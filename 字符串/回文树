//1.求一个字符串中所有回文字串的出现次数与长度乘积的最大值。（洛谷p3649）
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    int next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    int cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
}pt ;
int main()
{
    char s[N];
    cin>>s;
    int l=strlen(s);
    pt.init();
    for(int i=0;i<l;i++)
    {
        pt.add(s[i]);
    }
    pt.count();
    ll ans=0;
    for(int i=2;i<pt.p;i++)
    {
        ans=max(ans,(ll)pt.cnt[i]*pt.len[i]);
    }
    cout<<ans<<endl;
    return 0;
}

//2.求一个字符串的每个前缀的回文子串数（ural1960）
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    int next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    int cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
}pt ;
int main()
{
    char s[N];
    cin>>s;
    int l=strlen(s);
    pt.init();
    for(int i=0;i<l;i++)
    {
        pt.add(s[i]);
        cout<<pt.p-2<<" ";
    }
    cout<<endl;
    return 0;
}

//3.两个串a、b，问对a的每个回文子串，b中和该子串相同的子串个数之和
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    ll next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    ll cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
} p1,p2 ;
ll dfs(ll u,ll v)
{
    ll res=0;
    for(int i=0;i<M;i++)
    {
        if(p1.next[u][i]!=0&&p2.next[v][i]!=0)
        {
            res+=(p1.cnt[p1.next[u][i]]*p2.cnt[p2.next[v][i]]+dfs(p1.next[u][i],p2.next[v][i]));
        }
    }
    return res;
}
int main()
{
    ios::sync_with_stdio(false);
    int t,cas=0;
    cin>>t;
    while(t--)
    {
        char a[N],b[N];
        cin>>a>>b;
        int la=strlen(a),lb=strlen(b);
        p1.init(),p2.init();
        for(int i=0;i<la;i++)
            p1.add(a[i]);
        for(int i=0;i<lb;i++)
            p2.add(b[i]);
        p1.count(),p2.count();
        ll ans=0;
        ans=dfs(0,0)+dfs(1,1);
        printf("Case #%d: %lld\n",++cas,ans);
    }

    return 0;
}

/*4.回文树+字符串哈希
HDU6599，求有多少个子串是回文的，且这个回文子串前一半也是回文的
*/
#include <bits/stdc++.h>
#define int long long
using namespace std;
const int MAXN =  300000 + 10;
const int N = 26 ;
int id[MAXN];//每个串出现的位置
int ans[MAXN];//每个长度出现的个数
 
char s[MAXN];
const int hash1=201326611;
const int hash2=50331653;
const int mod=1e9+7;
int ha[MAXN],pp[MAXN];
//字符串hash
int get_hash(int l,int r){
    if(l==0)return ha[r];
    return (ha[r]-ha[l-1]*pp[r-l+1]%mod+mod)%mod;
}
//判断这个区间是否为回文
bool check(int l,int r){
    int len=r-l+1;
    int mid=(l+r)>>1;
    //判断前后是否相等
    if(len&1){
        return get_hash(l,mid)==get_hash(mid,r);
    }
    else{
        return get_hash(l,mid)==get_hash(mid+1,r);
    }
}
struct Palindromic_Tree {
	int next[MAXN][N] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
	int fail[MAXN] ;//fail指针，失配后跳转到fail指针指向的节点
	int cnt[MAXN] ; //表示节点i表示的本质不同的串的个数，最后用count统计
	int num[MAXN] ; //表示以节点i表示的最长回文串的最右端点为回文串结尾的回文串个数
	int len[MAXN] ;//len[i]表示节点i表示的回文串的长度
	int S[MAXN] ;//存放添加的字符
	int last ;//指向上一个字符所在的节点，方便下一次add
	int n ;//字符数组指针
	int p ;//节点指针
 
	int newnode ( int l ) {//新建节点
		for ( int i = 0 ; i < N ; ++ i ) next[p][i] = 0 ;
		cnt[p] = 0 ;
		num[p] = 0 ;
		len[p] = l ;
		return p ++ ;
	}
 
	void init () {//初始化
		p = 0 ;
		//两个根节点
		newnode (  0 ) ;
		newnode ( -1 ) ;
		last = 0 ;
		n = 0 ;
		S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
		fail[0] = 1 ;
	}
 
	int get_fail ( int x ) {//和KMP一样，失配后找一个尽量最长的
		while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
		return x ;
	}
 
	void add ( int c ) {
		c -= 'a' ;
		S[++ n] = c ;
		int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
		if ( !next[cur][c] ) {//如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
			int now = newnode ( len[cur] + 2 ) ;//新建节点
			fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
			next[cur][c] = now ;
			num[now] = num[fail[now]] + 1 ;
		}
		last = next[cur][c] ;
		cnt[last] ++ ;
		id[last]=n;//当前回文子串结尾的地方+1
	}
 
	void count () {
		for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
		//父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
		//从2开始，因为0和1为根节点
        for(int i=2;i<p;i++){
            //id[i]为结尾+1，len为长度,所以起点为id[i]-len[i]，终点为id[i]-1
            //这样就可以保存所有回文子串的位置和长度的信息了
            if(check(id[i]-len[i],id[i]-1)){
                ans[len[i]]+=cnt[i];
            }
        }
	}
};
Palindromic_Tree PAM;
signed main(){
    pp[0]=1;
    for(int i=1;i<MAXN;i++){
        pp[i]=pp[i-1]*hash1%mod;
    }
    while(scanf("%s",s)!=EOF){
        memset(ans,0,sizeof(ans));
        PAM.init();
        int len=strlen(s);
        ha[0]=s[0];
        for(int i=0;i<len;i++){
            PAM.add(s[i]);
        }
        for (int i=1 ;i<len;i++) {
            ha[i]=((ha[i - 1]*hash1%mod)+s[i])%mod;
        }
        PAM.count();
        printf("%lld",ans[1]);
        for(int i=2;i<=len;i++){
            printf(" %lld",ans[i]);
        }
        printf("\n");
    }
    return 0;
}
