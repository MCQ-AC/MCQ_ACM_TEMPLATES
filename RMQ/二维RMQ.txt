/*
HDU 2888
题意：给定一个n * m的矩阵，再给定q个询问，每次询问(r1，c1)为左上角，(r2,c2)为右下角的子矩形的最大值，并且判断该最大值是否出现在了这个子矩阵的4个顶角上？
二维 RMQ，预处理复杂度 n*m*log*(n)*log(m)
数组下标从 1 开始
*/
#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <string.h>
using namespace std;

int val[310][310];
int dpMax[310][310][9][9];//最大值
//int dpMin[310][310][9][9];//最小值
int mm[310];//二进制位数减一，使用前初始化
void initRmq(int n,int m)
{
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
        {
            dpMax[i][j][0][0] = val[i][j];
//            dpMin[i][j][0][0] = val[i][j];
        }
    for(int ii = 0; ii <= mm[n]; ii++)
        for(int jj = 0; jj <= mm[m]; jj++)
            if(ii+jj)
                for(int i = 1; i + (1<<ii) - 1 <= n; i++)
                    for(int j = 1; j + (1<<jj) - 1 <= m; j++)
                    {
                        if(ii)
                        {
                            dpMax[i][j][ii][jj] = max(dpMax[i][j][ii-1][jj],dpMax[i+(1<<(ii-1))][j][ii-1][jj]);
//                          dpMin[i][j][ii][jj] = min(dpMin[i][j][ii-1][jj],dpMin[i+(1<<(ii-1))][j][ii-1][jj]);
                        }
                        else
                        {
                            dpMax[i][j][ii][jj] = max(dpMax[i][j][ii][jj-1],dpMax[i][j+(1<<(jj-1))][ii][jj-1]);
//                          dpMin[i][j][ii][jj] = min(dpMin[i][j][ii][jj-1],dpMin[i][j+(1<<(jj-1))][ii][jj-1]);
                        }
                    }
}
//查询矩形内的最大值(x1<=x2,y1<=y2)
int rmqMax(int x1,int y1,int x2,int y2)
{
    int k1 = mm[x2-x1+1];
    int k2 = mm[y2-y1+1];
    x2 = x2 - (1<<k1) + 1;
    y2 = y2 - (1<<k2) + 1;
    return max(max(dpMax[x1][y1][k1][k2],dpMax[x1][y2][k1][k2]),max(dpMax[x2][y1][k1][k2],dpMax[x2][y2][k1][k2]));
}
/*int rmqMin(int x1,int y1,int x2,int y2)
{
    int k1 = mm[x2-x1+1];
    int k2 = mm[y2-y1+1];
    x2 = x2 - (1<<k1) + 1;
    y2 = y2 - (1<<k2) + 1;
    return min(min(dpMin[x1][y1][k1][k2],dpMin[x1][y2][k1][k2]),min(dpMin[x2][y1][k1][k2],dpMin[x2][y2][k1][k2]));
}*/
int main()
{
    //在外面对mm数组进行初始化
    mm[0] = -1;
    for(int i = 1; i <= 305; i++)
        mm[i] = ((i&(i-1))==0)?mm[i-1]+1:mm[i-1];
    int n,m;//行和列
    int Q;//查询次数
    int r1,c1,r2,c2;//左上角，右下角
    while(scanf("%d%d",&n,&m) == 2)
    {
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= m; j++)
                scanf("%d",&val[i][j]);
        initRmq(n,m);
        scanf("%d",&Q);
        while(Q--)
        {
            scanf("%d%d%d%d",&r1,&c1,&r2,&c2);
            if(r1 > r2)swap(r1,r2);
            if(c1 > c2)swap(c1,c2);
            int tmp = rmqMax(r1,c1,r2,c2);
            printf("%d ",tmp);
            if(tmp == val[r1][c1] || tmp == val[r1][c2] || tmp == val[r2][c1] || tmp == val[r2][c2])
                printf("yes\n");
            else printf("no\n");
        }
    }
    return 0;
}
