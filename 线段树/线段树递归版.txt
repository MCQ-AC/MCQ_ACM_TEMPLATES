//HDU 1166模板题
//线段树详解：https://blog.csdn.net/zearot/article/details/48299459
#include<bits/stdc++.h>
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
const int maxn=50005;
const double eps=1e-8;
const double PI = acos(-1.0);
#define lowbit(x) (x&(-x))
int Sum[maxn<<2],Add[maxn<<2];//Sum求和，Add为懒惰标记
int A[maxn],n;//存原数组数据下标[1,n]
//PushUp函数更新节点信息 ，这里是求和
void PushUp(int rt)
{
    Sum[rt]=Sum[rt<<1]+Sum[rt<<1|1];
}
//Build函数建树
void Build(int l,int r,int rt)  //l,r表示当前节点区间，rt表示当前节点编号
{
    if(l==r)  //若到达叶节点
    {
        Sum[rt]=A[l];//储存数组值
        return;
    }
    int m=(l+r)>>1;
    //左右递归
    Build(l,m,rt<<1);
    Build(m+1,r,rt<<1|1);
    //更新信息
    PushUp(rt);
}
//点修改 假设A[L]+=C:
void Update(int L,int C,int l,int r,int rt) //l,r表示当前节点区间，rt表示当前节点编号
{
    if(l==r) //到叶节点，修改
    {
        Sum[rt]+=C;
        return;
    }
    int m=(l+r)>>1;
    //根据条件判断往左子树调用还是往右
    if(L <= m) Update(L,C,l,m,rt<<1);
    else       Update(L,C,m+1,r,rt<<1|1);
    PushUp(rt);//子节点更新了，所以本节点也需要更新信息
}
//下推标记
void PushDown(int rt,int ln,int rn)
{
    //ln,rn为左子树，右子树的数字数量。
    if(Add[rt])
    {
        //下推标记
        Add[rt<<1]+=Add[rt];
        Add[rt<<1|1]+=Add[rt];
        //修改子节点的Sum使之与对应的Add相对应
        Sum[rt<<1]+=Add[rt]*ln;
        Sum[rt<<1|1]+=Add[rt]*rn;
        //清除本节点标记
        Add[rt]=0;
    }
}
//区间修改 假设A[L,R]+=C
void Update(int L,int R,int C,int l,int r,int rt) //L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号
{
    if(L <= l && r <= R) //如果本区间完全在操作区间[L,R]以内
    {
        Sum[rt]+=C*(r-l+1);//更新数字和，向上保持正确
        Add[rt]+=C;//增加Add标记，表示本区间的Sum正确，子区间的Sum仍需要根据Add的值来调整
        return ;
    }
    int m=(l+r)>>1;
    PushDown(rt,m-l+1,r-m);//下推标记
    //这里判断左右子树跟[L,R]有无交集，有交集才递归
    if(L <= m) Update(L,R,C,l,m,rt<<1);
    if(R >  m) Update(L,R,C,m+1,r,rt<<1|1);
    PushUp(rt);//更新本节点信息
}
//区间查询
int Query(int L,int R,int l,int r,int rt) //L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号
{
    if(L <= l && r <= R)
    {
        //在区间内，直接返回
        return Sum[rt];
    }
    int m=(l+r)>>1;
    //下推标记，否则Sum可能不正确
    PushDown(rt,m-l+1,r-m);

    //累计答案
    int ANS=0;
    if(L <= m) ANS+=Query(L,R,l,m,rt<<1);
    if(R >  m) ANS+=Query(L,R,m+1,r,rt<<1|1);
    return ANS;
}
/*
//建树
Build(1,n,1);
//点修改
Update(L,C,1,n,1);
//区间修改
Update(L,R,C,1,n,1);
//区间查询
int ANS=Query(L,R,1,n,1);
*/

int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    int t,k=0;
    cin>>t;
    while(t--)
    {
        memset(add,0,sizeof(add));
        int n;
        cin>>n;
        for(int i=1; i<=n; i++)
        {
            cin>>A[i];
        }
        Build(1,n,1);
        string s;
        int a,b;
        cout<<"Case "<<++k<<":"<<endl;
        while(cin>>s&&s[0]!='E')
        {
            cin>>a>>b;
            if(s[0]=='Q')
            {
                cout<<Query(a,b,1,n,1)<<endl;
            }
            else if(s[0]=='A')
            {
                Update(a,b,1,n,1);
            }
            else if(s[0]=='S')
            {
                Update(a,-b,1,n,1);
            }
        }
    }
    return 0;
}
