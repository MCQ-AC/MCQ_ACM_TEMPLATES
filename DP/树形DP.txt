1.入门题:没有上司的舞会
某大学有N个职员，编号为1~N。他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数Ri，但是呢，如果某个职员的上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。
思路：dp[x][0]、dp[x][1]表示以x为根的子树且选和不选x的最大值。dp[x][0]+=max(dp[v][1],dp[v][0](v为x的所有孩子)，dp[x][1]+=∑dp[v][0]。
#include<bits/stdc++.h>
using namespace std;
const int maxn=1e4;
int r[maxn],in[maxn],dp[maxn][2];
vector<int> g[maxn];
void dfs(int now)
{
    dp[now][0]=0;
    dp[now][1]=r[now];
    for(int i=0;i<g[now].size();i++)
    {
        int v=g[now][i];
        dfs(v);
        dp[now][0]+=max(dp[v][1],dp[v][0]);
        dp[now][1]+=dp[v][0];
    }
}
int main()
{
    std::ios::sync_with_stdio(false);
    int n;
    cin>>n;
    for(int i=1; i<=n; i++)
        cin>>r[i];
    int u,v;
    while(cin>>u>>v&&u+v)
    {
        g[v].push_back(u);
        in[u]++;
    }
    int root;
    for(int i=1; i<=n; i++)
    {
        if(!in[i])
        {
            root=i;
            break;
        }
    }
    dfs(root);
    cout<<max(dp[root][0],dp[root][1])<<endl;
    return 0;
}
2.树形背包(洛谷p2014)
现在有N门功课，每门课有个学分，每门课有一门或没有直接先修课（若课程a是课程b的先修课即只有学完了课程a，才能学习课程b）。一个学生要从这些课程里选择M门课程学习，问他能获得的最大学分是多少？
#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
const int maxn=1e3;
struct node
{
    int to,val;
};
vector<node> g[maxn];
int n,m,s[maxn],dp[maxn][maxn],num[maxn];
void dfs(int u,int fa)
{
    num[u]=1;
    dp[u][1]=s[u];
    for(int i=0;i<g[u].size();i++)
    {
        int v=g[u][i].to;
        if(v==fa) continue;
        dfs(v,u);
        for(int j=num[u];j;j--)
        {
            for(int k=1;k<=num[v];k++)
            {
                dp[u][j+k]=max(dp[u][j+k],dp[u][j]+dp[v][k]);
            }
        }
        num[u]+=num[v];
    }
}
int main()
{
    std::ios::sync_with_stdio(false);
    while(cin>>n>>m)
    {
        memset(num,0,sizeof(num));
        memset(dp,0,sizeof(dp));
        memset(s,0,sizeof(s));
        m++;
        for(int i=1;i<=n;i++)
        {
            int k;
            cin>>k>>s[i];
            g[k].push_back({i,0});
        }
        dfs(0,-1);
        cout<<dp[0][m]<<endl;
    }
    return 0;
}

3.树形背包(边权)(洛谷p2015)
题意：有一棵苹果树，如果树枝有分叉，一定是分2叉（就是说没有只有1个儿子的结点）。这棵树共有N个结点（叶子点或者树枝分叉点），编号为1-N,树根编号一定是1。现在这颗树枝条太多了，需要剪枝。但是一些树枝上长有苹果。给定需要保留的树枝数量，求出最多能留住多少苹果。
思路：将要保留的边的数量++，就转化成删除等量的点了。方法和上题类似，注意边权转化成点权是给to这个点。
#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
const int maxn=1e3;
struct node
{
    int to,val;
};
vector<node> g[maxn];
int n,m,s[maxn],dp[maxn][maxn],num[maxn];
void dfs(int u,int fa)
{
    num[u]=1;
    for(int i=0;i<g[u].size();i++)
    {
        int v=g[u][i].to;
        if(v==fa) continue;
        dp[v][1]=g[u][i].val;
        dfs(v,u);
        for(int j=num[u];j;j--)
        {
            for(int k=1;k<=num[v];k++)
            {
                dp[u][j+k]=max(dp[u][j+k],dp[u][j]+dp[v][k]);
            }
        }
        num[u]+=num[v];
    }
}
int main()
{
    std::ios::sync_with_stdio(false);
    while(cin>>n>>m)
    {
        memset(num,0,sizeof(num));
        memset(dp,0,sizeof(dp));
        m++;
        for(int i=0;i<n-1;i++)
        {
            int u,v,w;
            cin>>u>>v>>w;
            g[u].push_back({v,w});
            g[v].push_back({u,w});
        }
        dfs(1,0);
        cout<<dp[1][m]<<endl;
    }
    return 0;
}

4.牛客370F
题意:在一棵树中选一个点S，删除一些边使得所有叶子结点到达不了S。
思路:设dp[i]表示以i为根的子树的所有叶子到达不了i的最小代价。dp[u]+=min(dp[v],w),v为u的孩子，w为u-v的边权。

5.HDU2196给出一棵树，求离每个节点最远的点的距离
dp[0][u]表示以u为根的子树中的结点与u的最远距离
dp[1][u]表示以u为根的子树中的结点与u的次远距离
这两个可以一遍dfs通过儿子结点转移得到。显然dp[0][u]就是u的一个可能的答案，即u往下走的最远距离，还缺一部分就是u往上走的最远距离：
dp[2][u]表示u往上走的最远距离
对于这个的转移，分两种情况，是这样的：
    dp[2][v] = max( dp[0][u]+weight(u,v) , dp[2][u]+weight(u,v) ) （v是u的儿子 且 u往下走的最远距离不经过v）
    dp[2][v] = max( dp[1][u]+weight(u,v) , dp[2][u]+weight(u,v) ) （v是u的儿子 且 u往下走的最远距离经过v）
再一遍dfs就能得到。每个u的答案就是max(dp[0][u],dp[2][u]);
思路参考：https://www.cnblogs.com/WABoss/p/5267488.html
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define MAXN 11111
struct Edge{
    int v,w,next;
}edge[MAXN<<1];
int NE,head[MAXN];
void addEdge(int u,int v,int w){
    edge[NE].v=v; edge[NE].w=w;
    edge[NE].next=head[u]; head[u]=NE++;
}
long long d[3][MAXN];
int idx[MAXN];
void dfs0(int u,int fa){
    long long mx0=0,mx1=0;
    for(int i=head[u]; i!=-1; i=edge[i].next){
        int v=edge[i].v;
        if(v==fa) continue;
        dfs0(v,u);
        if(mx0<=d[0][v]+edge[i].w) mx1=mx0,mx0=d[0][v]+edge[i].w,idx[u]=v;
        else if(mx1<d[0][v]+edge[i].w) mx1=d[0][v]+edge[i].w;
        else if(mx1<d[1][v]+edge[i].w) mx1=d[1][v]+edge[i].w;
    }
    d[0][u]=mx0; d[1][u]=mx1;
}
void dfs1(int u,int fa){
    for(int i=head[u]; i!=-1; i=edge[i].next){
        int v=edge[i].v;
        if(v==fa) continue;
        if(idx[u]==v) d[2][v]=max(d[1][u]+edge[i].w,d[2][u]+edge[i].w);
        else d[2][v]=max(d[0][u]+edge[i].w,d[2][u]+edge[i].w);
        dfs1(v,u);
    }
}
int main(){
    int n,a,b;
    while(~scanf("%d",&n)){
        NE=0;
        memset(head,-1,sizeof(head));
        for(int i=2; i<=n; ++i){
            scanf("%d%d",&a,&b);
            addEdge(i,a,b); addEdge(a,i,b);
        }
        memset(d,0,sizeof(d));
        dfs0(1,1);
        dfs1(1,1);
        for(int i=1; i<=n; ++i){
            printf("%lld\n",max(d[0][i],d[2][i]));
        }
    }
    return 0;
}

6.HDU5834给一棵树，点和边都有权值，经过一点可以加上该点的权值但最多只加一次，经过边会减去该边权值，问从各个点分别出发最多能获得多少权值。
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF=0x3f3f3f3f;
const int maxn=1e5+10;
int T;
int N;
int val[maxn];
int head[maxn];
int dp[2][maxn];//0代表经过一些路,回到原来u点的最大值,1代表经过一些路,但不回来原来u点
int tot;
struct Edge
{
    int to;
    int w;
    int nex;
};
Edge edge[2*maxn];
void addedge(int from,int to,int w)
{
    edge[tot].to=to;
    edge[tot].w=w;
    edge[tot].nex=head[from];
    head[from]=tot++;
}
void init()
{
    memset(head,-1,sizeof(head));
    tot=0;
}

void dfs1(int u,int fa)
{
    dp[0][u]=dp[1][u]=val[u];
    for(int i=head[u]; i!=-1; i=edge[i].nex)
    {
        int v=edge[i].to;
        if(v==fa)continue;
        dfs1(v,u);
        if(dp[0][v]-2*edge[i].w>0)
        {
            dp[0][u]+=dp[0][v]-2*edge[i].w;
        }
    }
    for(int i=head[u]; i!=-1; i=edge[i].nex)
    {
        int v=edge[i].to;
        if(v==fa)continue;

        int mx=dp[0][u]-max(0,dp[0][v]-2*edge[i].w)+(dp[1][v]-edge[i].w);
        if(mx>=dp[1][u])
        {
            dp[1][u]=mx;
        }
    }
}
void dfs2(int u, int fa, int Cost)
{
    int dir = u, tmp;
    if(fa != -1 && dp[0][fa] - Cost * 2 > 0)
    {
        dp[0][u] += dp[0][fa] - Cost * 2;
    }
    tmp = dp[1][u] = dp[0][u];
    for(int i = head[u]; i!=-1; i = edge[i].nex)
    {
        int v = edge[i].to;
        int mx=dp[0][u] - max(0, dp[0][v] - edge[i].w * 2) + (dp[1][v] - edge[i].w);
        if(mx >= dp[1][u])
        {
            dir = v;
            tmp=dp[1][u];
            dp[1][u] = mx;
        }
        else if(mx >= tmp)
        {
            tmp = mx;
        }
    }
    int L = dp[0][u], R = dp[1][u];
    for(int i = head[u]; i!=-1; i = edge[i].nex)
    {
        int v = edge[i].to;
        if(v == fa) continue;

        int mx=dp[0][v] - edge[i].w * 2;
        if(mx > 0)
        {
            dp[0][u]-= mx;
        }
        if(dir == v)
        {
            dp[1][u] = tmp;
        }
        if(dp[0][v] - edge[i].w * 2 > 0)
        {
            dp[1][u] -= mx;
        }
        dfs2(v, u, edge[i].w);
        dp[0][u] = L, dp[1][u] = R;
    }
}
int main()
{
    scanf("%d",&T);
    for(int cas=1; cas<=T; cas++)
    {
        init();
        printf("Case #%d:\n",cas);
        scanf("%d",&N);
        for(int i=1; i<=N; i++)
        {
            scanf("%d",&val[i]);
        }
        int u,v,w;
        for(int i=1; i<N; i++)
        {
            scanf("%d%d%d",&u,&v,&w);
            addedge(u,v,w);
            addedge(v,u,w);
        }
        dfs1(1,-1);
        dfs2(1,-1,0);
        for(int i=1; i<=N; i++)
        {
            printf("%d\n",max(dp[0][i],dp[1][i]));
        }
    }
    return 0;
}

