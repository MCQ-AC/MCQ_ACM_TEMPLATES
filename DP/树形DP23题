1.HDU 1520

题意：给一棵树，选最多的结点使得选择的结点不存在直接的父子关系

很容易想到一个结点有两个状态：选或者不选

所以自然地想到状态dp[u][0/1]表示u子树内的最佳答案，u的状态为选或者不选

初始化自然是叶子结点dp[u][0]=0,dp[u][1]=w[u]

转移则可以考虑依次考虑

u不选的时候：u的儿子可以任意选或者不选，所以dp[u][0]+=max(dp[v][0],dp[v][1])

u选的时候：u的儿子必定不能选，所以dp[u][1]+=dp[v][0]   然后dp[u][1]+=w[u]表示加上u这个点

答案自然就是max(dp[rt][0],dp[rt][1])了

2.POJ 1436

题意：选中一个点则与其相连的边将被覆盖，问最少选几个点使得树中所有边均被覆盖

和上一个题很类似

同样状态设为dp[u][0/1]

初始的底层状态自然是dp[u][0]=0,dp[u][1]=1;

考虑一个非叶子结点和它儿子的所有连边

如果当前结点不选，那这些边只能由其儿子保护，所以dp[u][0]+=dp[v][1]

如果当前结点选，那这些边已被保护，其儿子选和不选都行，所以dp[u][1]+=min(dp[v][0],dp[v][1])

答案自然是min(dp[rt][0],dp[rt][1])

3.URAL 1018

题意：树中每个点有权值，问只留下k个点剩下的最大权值和是多少？留下的点还是构成一棵树

树形背包

状态定义成dp[u][i]表示u子树内剩i个点的最大权值

考虑叶子结点：dp[u][0]=0,dp[u][1]=w[u]

考虑非叶子结点的一个状态dp[u][i]，对于当前的一个儿子v，枚举一个k表示从这个儿子里取几个结点，维护一个最大值

其实我们这里的状态是三维的，表示u子树的前j个子树取了i个结点的答案

我们使用滚动数组把j这一维滚掉

这里简化了题目，每一个结点固定只有两个儿子，用一般做法做肯定也是没问题的

还有要注意的地方就是这里根是一定要保留的

处理方法就是对于状态dp[u][1]直接赋值，枚举时候i从2开始，这样就可以默认根已取

4.HDU 2196

题意：对于树中的每一个结点，输出树中与其距离最远的结点的距离值

经典的树形DP问题

状态定义为dp[u][0/1]为u到其子树内结点的最远距离、次远距离

这样一轮dp下来，可以想到对于根来说,dp[rt][0]就是它的答案

但是对于其它结点来说只得到了其子树内的答案，而我们需要的是其对于整棵树的信息

这里需要再一次dfs，相当于反过来从根往叶子再dp一次，通过根的答案推其余结点的答案

这里之所以要维护一个次大值，就是对于一个结点u的儿子v，

若u的最远距离是经过u的，那v的答案应该是v子树内的答案和u的次大值比较，否则v的答案和u的最大值比较

画个图就明白了

5.POJ 2152

题意：树中每个结点有两个值：w[i]表示在i建设防火设施的价格，d[i]表示与i最近的防火设施的距离上限，求满足所有d[i]的最小花费

算是一道比较难的树形dp，状态和普通的树形DP略有不同

树形dp很多时候是把一个结点及其子树看成一个整体，然后考虑这个结点的状态进行转移

考虑到数据范围N<=1000,可以定义状态dp[u][i]表示u依靠i时，保证子树内安全的最小花费

为了转移方便，再定义all[u]表示保证u的安全的最小花费

其实可以理解为all[u]是在dp[u][i]中取了个最优值

要确定一个点是否能被u依靠就需要知道u与该点的距离

所以先n^2处理树中任意两点的距离

考虑叶子结点：dp[u][i]=w[i]

考虑一个非叶子结点u，先枚举它依靠的结点i

再考虑u的儿子v，v可以选择依靠或者不依靠i，则dp[u][i]+=min(dp[v][i]-c[i],all[v])

对于u的每一个i更新u的最优解all[u]

对于u的孙子k是不需要考虑的，因为k依靠i的情况在解决v的时候已经考虑到了，所以不会有重复计算的情况

6.POJ 3162

题意：对于树中每一个结点i找到另一个结点使得两者距离dp[i]最远，最后输出一段最长区间的长度，区间maxv-minv<=M

只是在树形dp上加了点东西而已，用线段树+two pointer维护就好了

7.codeforces 219D

题意：树边有方向，选择一个点，翻转最少路径，使得其能到达其余所有的点，输出所有可能的答案

可以将翻转理解为一种花费，那不翻转就是花费0，翻转则为1

可以定义dp[u]表示u到所有点的距离和，那dp[u]最小的就是答案

依旧先考虑u的子树内的答案

考虑一个叶子：dp[u]=0;

考虑一个非叶子u以及其的一个儿子v：很容易想到dp[u]+=dp[v]+w[u,v]

一次dfs下来后rt的答案已知，接下来通过rt来推其余结点对于整棵树的答案

考虑结点u及其一个儿子v，v到v子树内的答案已知，v到u除v子树的结点的答案是dp[u]-dp[v]-w[u,v]

所以dp[v]+=dp[u]-dp[v]-w[u,v]+w[v,u]

8.POJ 1155

题意：树中每个叶子有点权表示收入，边权表示花费。选择某些叶子后，不必要的边可删掉，最多选择几个点使得花费>=收入

状态很多时候是根据要求的东西来定义的

这里定义dp[u][i]为子树u取i个叶子的最优解

由于不选叶子的话是不需要任何花费的，所以容易想到dp[u][0]=0

考虑一个叶子，其第二维只有0/1两种取值，1的话明显是dp[u][1]=w[u]

考虑一个非叶子，第二维1~sz[u]都是无法确定的状态，而且考虑到结果可能是负值，而且我们需要的是一个最大值，所以初始化为-INF

对于一个结点u的一个儿子v，枚举在这个儿子中取的叶子数k，维护个最优解就好了

9.HDU 1011

题意：树中每一个结点有一个花费一个收益，问K元能取得的最大收益是多少

明显的树形背包，一个结点可以看成一个物品

XJB搞搞就行了

有个坑是a/20向上取整不能写成(a-1)/20+1，a可能是0

10.POJ 1947

题意：问最少需要破坏多少条边能产生一个大小为K的块

dp[u][i]表示u的子树中产生一个i大小的块需要破坏的最少边数

num[u]表示u的儿子数

这题考虑的方向不同平常

考虑块的大小1~sz[u] (0的大小是不合法的状态)

若要在u的子树中产生一个1大小的块，初始情况应该是u和所有儿子的连边断开，所以dp[u][1]=num[u]

其实这样处理相当于对于每一个状态来说u都是默认取了的

考虑一个结点u及其一个儿子v，对于状态dp[u][i] 枚举在v中取的结点数k

最后要枚举一个块的根，因为我们之前处理状态的时候是默认根取，所以最优解还可能在子树中

如果加一维状态[0/1]表示u是否取的话应该可以避免这个问题，不过也没有去尝试了

11.HDU 1561

题意：每个结点有一个权值，问选择K个结点（必须按路径选择）获得的最大权值

典型的树形背包

由于不是任意选，我们只需要在状态转移的时候变通一下就好了

对于u来说，我要选择其子孙的话前提是u选择

所以对第二维i==1的时候单独处理，而且之后不再更新这个值就能保证u是默认被选择的

12.HDU 4003

题意：树中每条边有花费，有k个机器人，问遍历所有的点的最少花费(可以回头，每次只能从s出发

这一题的状态定义很有意思

dp[u][i]表示遍历完u的子树后有i个机器人没有回到u结点的最优解

对于每一棵子树都是需要遍历完的，所以必须选择一个方案

为了保证至少选择一个方案，所以在考虑当前儿子v的时候先将答案加上一个状态，这里是加上没有机器人留在v子树的方案

然后再对v做一个背包，若有更优解则初始放置的选择将被替换掉

其实相当于对于子树v有k件物品来选择，必须选择一件

13.HDU 4276

题意：每个点有点权，边有花费，问T时间能否从1到达n，若能，能获取的最大权值是多少

首先想到树中两点的路径是唯一的，既然要从1到达n，先考虑最短路径能否到达

之后剩余的时间作为背包容量，因为其余的点都是非必须的，所以去了必须还要回来，故每条非必要的边花费都需要*2

 所以做法就是先把总时间减去1到n的路径距离，并把路径上的花费置零

然后对于每一个结点做背包，对于u的儿子v枚举一个花费k，注意边的花费要double

14.HDU 3586

题意：给一个限制m，切断的路径权值和不超过m，单个边权值也不超过k，求最小的k使得所有叶子和根不相连

二分一个k

对于一个确定的k，dp[u]表示u的叶子全部和u分离需要的最小花费

考虑叶子节点：dp[u]=INF（不合法状态

考虑非叶子结点：一开始是没有和儿子相连，所以dp[u]=0

考虑u的一个儿子v，若（u,v）这条边是<=lim，则可以选择在消除这条边或者是在v的子树中消除，两者取一个最优解

最后判断dp[1]是否小于给定的m

15. POJ 3107

题意：输出树中的结点k，删去k后产生的最大的联通块最小

直接两次dp就好了，第一次处理子树第二次考虑父亲除去当前结点产生的最大块，维护个最大值

16.POJ 3140

题意：选择一条树边断开，使得分成的两部分的总点权差最小，输出最小值

就直接预处理每一个点及其子树的总点权

枚举一个点和其父亲断开，取个最优值就好了

17. POJ 2486

题意：从树根1走K步能获得的最大点权，可以走回头路

dp[u][i][0/1]表示从u出发走i步，最终回到u/不回到u的最优值

考虑一个叶子结点：dp[u][0][0]=w[u];

考虑一个非叶子结点u及其一个儿子v，枚举一个k表示对于这个儿子v走的步数

有3种结果：留在v子树，回到u，留在u其它子树

画图就能看出三种情况的转移：

留在v子树:状态分裂为dp[u][j-k-1][0],dp[v][k][1]  花费为1步

回到u:状态分裂为dp[u][j-k-2][0],dp[v][k][0] 花费为2步

留在其他子树:状态分裂为dp[u][j-k-2][1],dp[v][k][0] 花费为2步

18. HDU 4044

题意：每个点有ki种选择，每种选择对应一种一种花费一种收益 问拥有m元，令x为1到所有叶子（不含1）的路径的点权和最小值

求x的最大值

一开始的想法是的定义dp[u][i][0/1]为u子树花i元，u选或者不选的答案

但是后面会发现这样定义状态的话对于dp[u][i][1]的合并不是很好处理，因为我没有记录u选择的是哪个方案

看了题解后学了一个新姿势

定义dp[u][i]为u不选的时候花i元的最优解

预处理一个w[u][i]表示u结点花i元最多能获得的权值

考虑一个叶子结点：dp[u][i]=w[u][i]

考虑一个非叶子结点不选时候:每一个儿子v加进来的时候，状态都分裂为dp[v][k]和dp[u][j-k]

对于每一个枚举的k来说，答案是min(dp[v][k],dp[u][j-k]) 维护这个答案的最大值就是dp[u][j]

考虑完u不选的情况后，再对u单独做一次背包，枚举u的花费，取个最优值就是答案

 19.HDU 5758

题意：点有点权边有花费，点权只能获得一次，花费每次经过都要扣除，可以走回头路，问能拿到的最大价值

参考Apple Tree可以知道需要加一维[0/1]表示是否回到u

定义dp[u][0/1]表示从u出发不回/回到u的最优解

求一个结点对于整棵树的信息一般都是先处理子树内的信息，再第二次dfs处理父亲对答案的影响

先考虑子树内：

考虑一个叶子结点：dp[u][0]=dp[u][1]=w[u]

考虑一个非叶子u和他的一个儿子v：

对于dp[u][0]来说，v的贡献只能是dp[v][0]-2*w[u,v]，如果这个值小于0我必然不走v

对于dp[u][1]来说，如果不停在v内，v的贡献也是dp[v][0]-2*w[u,v]，如果停在u则状态分裂为dp[u][0]+dp[v][1]-w[u,v]

再考虑fa对u的影响

考虑fa对u的影响时一般需要把u对fa的影响先排除

对于dp[fa][0]来说u的影响只能是max(0,dp[u][0]-2*w[fa,u])，直接减去就行了

对于dp[fa][1]来说有两种情况

若最终不停在u，则和dp[fa][0]一样处理

若停在u，则需要对fa再做一次排除u后的背包

这里将fa对u的影响作为参数下传，为的是保证在推u的时候fa的值是对于整棵树的，而其余结点是对于其子树的

之所以这样做是因为用fa更新u的时候，排除u对fa的影响之后fa相当于u的一棵新子树

 20.NUBT 1638

题意：建图略麻烦，抽象出来就是说树中选m个结点，其中rt到每一个叶子的路径上被选的结点数不超过k，问获得的最大权值是多少

定义dp[u][i][j][0/1]表示u子树选i个，最多的路径选了j个，u选/不选

dp值全部初始化为-1表示不合法状态

考虑一个叶子结点:选的话是dp[u][1][1][1]=w[u]  不选dp[u][0][0][0]=0

考虑一个非叶子结点u和他的一个儿子v：

对于状态dp[u][i][j][0]，可能转移过来的状态有dp[u][i-k][j][0]+dp[v][k][0~j][0/1]或者dp[u][i-k][0~j][0]+dp[v][k][j][0/1]

对于状态dp[u][i][j][1]，有dp[u][i-k][j][1]+dp[v][k][0~j-1][0/1]或dp[u][i-k][0~j][1]+dp[v][k][j-1][0/1](之所以v是j-1为上限是因为u选了的话合并后v的最长链长度必然+1，这样做是为了限制最长链在j范围内)

21.HDU 5758

题意：边花费1，可以从一个点瞬移到另一个点，问瞬移次数最少的前提下遍历所有边的最小花费

可以知道瞬移次数是(叶子数+1）/2

定义dp[u][0]为遍历完u后的最小花费(只是第一次dp，答案不一定是最终答案

考虑非叶子u和他的一个儿子v:

若v有偶数个儿子，则要在瞬移次数最少的情况下遍历(u,v)这条边，就必须有两个结点和v外的结点配对，所以(u,v)对答案贡献2

同理奇数的时候贡献1

如果总叶子数是偶数那答案已经出来了

但是如果总叶子数是奇数这样的答案可能会 偏大

其实奇数的情况就是在偶数的情况加了一条没有分叉的单链

所以再定义dp[u][1]为遍历u后的最小花费(第二次dp，独立与第一次dp

对于一个u，枚举这条单链出现的儿子v：

如果这个儿子就是一条单链，并且u是这条单链的起点，则dp[u][1]=min(dp[u][1],dp[u][0])

如果不是儿子v不是单链则把这条单链从v中剔除，则v中的叶子数的奇偶就变化了

dp[u][1]先减去dp[v][0]，再减去奇偶变化的影响d，再加上单链存在与v的dp值dp[v][1]，维护最优解

最后若总叶子数是偶数则取第一次dp的结果，否则取第二次的

 22.codeforces Round #322(Div.2) F

题意：把叶子平分染成两种颜色，其余点随便染，求最少有对相邻的点颜色不同  输入保证叶子是偶数个

定义dp[u][i][0/1]表示u子树染i个儿子0色，u染0/1色

这题经典的地方在于叶子和非叶子的初始情况不一样

先dp值全部赋INF表示不合法

对于叶子来说：dp[u][1][0]=0,dp[u][0][1]=0，其余两个状态不合法

考虑非叶子u：

非叶子u的颜色对第二维是没影响的,所以dp[u][0][1]=dp[u][0][0]=0

由于这里是必须要选择儿子的情况，之前有些题目是儿子可以不选

必须选的情况的处理方法有两种，第一种是先强制放一种状态，再枚举其他状态看看是否更优，有就替换，没有就保留原来的

或者说是用一个变量去存放儿子的最优情况，然后把这个最优情况强制合并到原状态里

这里我采用的是第二种方法

23.COJ 1793

题意：对于每个点给一个限制xi表示xi选了才能选i，现在最多选m个人，问在这些限制下最多能选几个

如果连边(xi->i)一眼看过去结构很像树，因为每个结点只有一个父亲

但是这里可能会构成强联通分量

不过很容易想到把强联通分量缩点后也是可以构成树或者森林的

森林我们可以建立一个虚根0来合并成一棵树

一开始有个地方没想明白，就是对于一个强联通分量来说可能去掉一个点后还是强联通分量，所以一个强联通分量内我选择几个人是不好判断的

但是仔细想想题目给的条件，每个点的入度只能为1，而这样构成的强联通分量只能是一个简单环

而对于一个简单环来说我只能全取或者全不取

所以问题就转化为了一个m的背包，每个点的sz即使花费也是价值，问能拿到的最大价值是多少

这里有个地方需要变通

这里是选了父亲才能选择儿子，所以对于一个结点u以及他的儿子v来说，我要把v加进来我首先得保证u被选

所以我枚举v的容量k的时候始终保证j-k也就是剩余的容量始终是大于sz[u]的，这样就能保证u始终被选
