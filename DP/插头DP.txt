1.(洛谷p5056)求棋盘中的哈密顿回路个数，障碍不能走
第1行，n,m(2<=n,m<=12)
从第2行到第n+1行，每行一段字符串(m个字符)，"*"表不能铺线，"."表必须铺
输出一个整数，表示总方案数
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#define ll long long
#define hash ddf
using namespace std;
int n,m,x[15][15],cur,pre,ex,ey;
int st[2][300010];ll ans[2][300010],re;
int tot[2],bit[20],state[300010],st_tot,hash=300000;
struct edge{
    int to,next;
}a[300010];
void insert(int sta,ll val){
//    cout<<"insert "<<sta<<ends<<val<<endl;
    int p=sta%hash,i;
    for(i=state[p];i;i=a[i].next){
        if(st[cur][a[i].to]==sta){
            ans[cur][a[i].to]+=val;return;
        }
    }
    tot[cur]++;
    a[++st_tot].to=tot[cur];
    a[st_tot].next=state[p];
    state[p]=st_tot;st[cur][tot[cur]]=sta;ans[cur][tot[cur]]=val;
}
int main(){
    int i,j,k,l,now,down,right;ll val;char s[20];
    scanf("%d%d",&n,&m);
    for(i=1;i<=n;i++){
        scanf("%s",s);
        for(j=0;j<m;j++) 
            if(s[j]=='.') 
                x[i][j+1]=1,ex=i,ey=j+1;
    }
    for(i=1;i<15;i++) bit[i]=i<<1;
    cur=0;tot[cur]=1;ans[cur][1]=1;st[cur][1]=0;
    for(i=1;i<=n;i++){
        for(j=1;j<=tot[cur];j++) st[cur][j]<<=2;
        for(j=1;j<=m;j++){
//            cout<<"begin "<<i<<ends<<j<<endl;
            st_tot=0;memset(state,0,sizeof(state));
            pre=cur;cur^=1;tot[cur]=0;
            for(k=1;k<=tot[pre];k++){
                now=st[pre][k];val=ans[pre][k];
                down=(now>>bit[j-1])%4;right=(now>>bit[j])%4;
//                cout<<"    from "<<now<<ends<<val<<ends<<down<<ends<<right<<endl;
                if(!x[i][j]){
                    if(!down&&!right){
                        insert(now,val);continue;
                    }
                }
                else if(!down&&!right){
                    if(x[i][j+1]&&x[i+1][j])
                        insert(now+(1<<bit[j-1])+((1<<bit[j])<<1),val);
                }
                else if(!down&&right){
                    if(x[i][j+1]) insert(now,val);
                    if(x[i+1][j]) 
                        insert(now-right*(1<<bit[j])+right*(1<<bit[j-1]),val);
                }
                else if(down&&!right){
                    if(x[i+1][j]) insert(now,val);
                    if(x[i][j+1])
                        insert(now+down*(1<<bit[j])-down*(1<<bit[j-1]),val);
                }
                else if(down==1&&right==1){
                    int cnt=1;
                    for(l=j+1;l<=m;l++){
                        if((now>>bit[l])%4==1) cnt++;
                        if((now>>bit[l])%4==2) cnt--;
                        if(!cnt){
                            insert(now-(1<<bit[l])-(1<<bit[j])-(1<<bit[j-1]),val);
                            break;
                        }
                    }
                }
                else if(down==2&&right==2){
                    int cnt=1;
                    for(l=j-2;l>=0;l--){
                        if((now>>bit[l])%4==2) cnt++;
                        if((now>>bit[l])%4==1) cnt--;
                        if(!cnt){
                            insert(now+(1<<bit[l])-((1<<bit[j])<<1)-((1<<bit[j-1])<<1),val);
                            break;
                        }
                    }
                }
                else if(down==2&&right==1){
                    insert(now-((1<<bit[j-1])<<1)-(1<<bit[j]),val);
                }
                else if(down==1&&right==2){
                    if(i==ex&&j==ey) re+=val;
                }
            }
        }
    }
    printf("%lld\n",re);
}
2.(洛谷p3272)用L型的地板铺满整个客厅有多少种不同的方案？需要注意的是，L型地板的两端长度可以任意变化，但不能长度为0。
输入的第一行包含两个整数，R和C，表示客厅的大小。接着是R行，每行C个字符。'_'表示对应的位置是空的，必须铺地板；'*'表示对应的位置有柱子，不能铺地板。
输出方案数%20110520。
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#define hash deep_dark_fantasy
#define ll long long
#define MOD 20110520
using namespace std;
inline int read(){
    int re=0,flag=1;char ch=getchar();
    while(ch>'9'||ch<'0'){
        if(ch=='-') flag=-1;
        ch=getchar();
    }
    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();
    return re*flag;
}
int n,m,x[150][150],cur,pre,ex,ey;
int st[2][300010];ll ans[2][300010],re;
int tot[2],bit[20],state[300010],st_tot,hash=300000;
struct edge{
    int to,next;
}a[300010];
void insert(int now,ll val){
    int p=now%hash;
    for(int i=state[p];i;i=a[i].next){
        if(st[cur][a[i].to]==now){
            ans[cur][a[i].to]+=val;
            ans[cur][a[i].to]%=MOD;return;
        }
    }
    tot[cur]++;
    a[++st_tot].to=tot[cur];
    a[st_tot].next=state[p];
    state[p]=st_tot;st[cur][tot[cur]]=now;ans[cur][tot[cur]]=val%MOD;
}
void dp(){
    int i,j,k,down,right,now;ll val;
    cur=0;tot[cur]=1;ans[cur][1]=1;st[cur][1]=0;
    for(i=1;i<=n;i++){
        for(j=1;j<=tot[cur];j++) st[cur][j]<<=2;
        for(j=1;j<=m;j++){
            memset(state,0,sizeof(state));st_tot=0;
            pre=cur;cur^=1;tot[cur]=0;
            for(k=1;k<=tot[pre];k++){
                now=st[pre][k];val=ans[pre][k];
                right=(now>>bit[j-1])%4;down=(now>>bit[j])%4;
                if(!x[i][j]){//障碍格子
                    if(!down&&!right){
                        insert(now,val);continue;
                    }
                }
                if(!right&&!down){//第一种情况
                    if(x[i+1][j]&&x[i][j+1])
                        insert(now+((1<<bit[j-1])<<1)+((1<<bit[j])<<1),val);
                    if(x[i+1][j]) insert(now+(1<<bit[j-1]),val);
                    if(x[i][j+1]) insert(now+(1<<bit[j]),val);
                }
                if(right==1&&!down){//第三种情况
                    if(x[i][j+1]) insert(now-(1<<bit[j-1])+(1<<bit[j]),val);
                    if(x[i+1][j]) insert(now+(1<<bit[j-1]),val);
                }
                if(down==1&&!right){//第二种情况
                    if(x[i+1][j]) insert(now-(1<<bit[j])+(1<<bit[j-1]),val);
                    if(x[i][j+1]) insert(now+(1<<bit[j]),val);
                }
                if(right==2&&!down){//第五种情况
                    if(i==ex&&j==ey) re+=val,re%=MOD;
                    if(x[i][j+1]) insert(now-((1<<bit[j-1])<<1)+((1<<bit[j])<<1),val);
                    insert(now-((1<<bit[j-1])<<1),val);
                }
                if(down==2&&!right){//第四种情况
                    if(i==ex&&j==ey) re+=val,re%=MOD;
                    if(x[i+1][j]) insert(now-((1<<bit[j])<<1)+((1<<bit[j-1])<<1),val);
                    insert(now-((1<<bit[j])<<1),val);
                }
                if(down==1&&right==1){//第六种情况
                    if(i==ex&&j==ey) re+=val,re%=MOD;
                    insert(now-(1<<bit[j-1])-(1<<bit[j]),val);
                }
            }
        }
    }
}
int main(){
    int i,j;char ch;
    n=read();m=read();
    for(i=1;i<=20;i++) bit[i]=i<<1;
    if(n>m){
        for(i=1;i<=n;i++){
            for(j=1;j<=m;j++){
                ch=getchar();
                while(ch!='*'&&ch!='_') ch=getchar();
                x[i][j]=(ch=='_');
                if(x[i][j]) ex=i,ey=j;
            }
        }
    }
    else{
        swap(n,m);
        for(i=m;i>0;i--){
            for(j=1;j<=n;j++){
                ch=getchar();
                while(ch!='*'&&ch!='_') ch=getchar();
                x[j][i]=(ch=='_');
                if(x[j][i]&&((j>ex)||(j==ex&&i>ey))) ex=j,ey=i;
            }
        }
    }
    dp();
    printf("%lld",re);
}
3.(洛谷p3190)求棋盘中权值最大的回路。
#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#define ll long long
#define hash deep_dark_fantasy
#define inf 1e9
using namespace std;
inline int read(){
    int re=0,flag=1;char ch=getchar();
    while(ch>'9'||ch<'0'){
        if(ch=='-') flag=-1;
        ch=getchar();
    }
    while(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();
    return re*flag;
}
int n,m,x[150][150],cur,pre,ex,ey;
int st[2][300010];ll ans[2][300010],re;
int tot[2],bit[20],state[300010],st_tot,hash=300000;
struct edge{
    int to,next;
}a[300010];
void insert(int sta,ll val){
    int p=sta%hash,i;
    for(i=state[p];i;i=a[i].next){
        if(st[cur][a[i].to]==sta){
            ans[cur][a[i].to]=max(ans[cur][a[i].to],val);return;
        }
    }
    tot[cur]++;
    a[++st_tot].to=tot[cur];
    a[st_tot].next=state[p];
    state[p]=st_tot;st[cur][tot[cur]]=sta;ans[cur][tot[cur]]=val;
}
void dp(){
    int i,j,k,l,now,down,right;ll val;re=-inf;
    cur=0;tot[cur]=1;ans[cur][1]=0;st[cur][1]=0;
    for(i=1;i<=n;i++){
        for(j=1;j<=tot[cur];j++) st[cur][j]<<=2;
        for(j=1;j<=m;j++){
            pre=cur;cur^=1;tot[cur]=0;st_tot=0;memset(state,0,sizeof(state));
            for(k=1;k<=tot[pre];k++){
                now=st[pre][k];val=ans[pre][k];
                right=(now>>bit[j-1])%4;down=(now>>bit[j])%4;
                if(!down&&!right){
                    insert(now,val);
                    if(j!=m)
                        insert(now+(1<<bit[j-1])+((1<<bit[j])<<1),val+x[i][j]);
                }
                if(down&&!right){
                    insert(now-down*(1<<bit[j])+down*(1<<bit[j-1]),val+x[i][j]);
                    if(j!=m)insert(now,val+x[i][j]);
                }
                if(right&&!down){
                    insert(now,val+x[i][j]);
                    if(j!=m)
                        insert(now+right*(1<<bit[j])-right*(1<<bit[j-1]),val+x[i][j]);
                }
                if(right==1&&down==1){
                    int cnt=1;
                    for(l=j+1;l<=m;l++){
                        if((now>>bit[l])%4==1) cnt++;
                        if((now>>bit[l])%4==2) cnt--;
                        if(!cnt){
                            insert(now-(1<<bit[l])-(1<<bit[j])-(1<<bit[j-1]),val+x[i][j]);
                            break;
                        }
                    }
                }
                if(right==2&&down==2){
                    int cnt=1;
                    for(l=j-2;l>=0;l--){
                        if((now>>bit[l])%4==1) cnt--;
                        if((now>>bit[l])%4==2) cnt++;
                        if(!cnt){
                            insert(now+(1<<bit[l])-((1<<bit[j])<<1)-((1<<bit[j-1])<<1),val+x[i][j]);
                            break;
                        }
                    }
                }
                if(right==2&&down==1){
                    insert(now-((1<<bit[j-1])<<1)-(1<<bit[j]),val+x[i][j]);
                }
                if(right==1&&down==2){
                    if((now==(1<<bit[j-1])+((1<<bit[j])<<1))&&(val+x[i][j]>re)){
                        re=val+x[i][j];
                    }
                }
            }
        }
    }
}
int main(){
    int i,j;
    n=read();m=read();
    for(i=1;i<=10;i++) bit[i]=(i<<1);
    for(i=1;i<=n;i++) for(j=1;j<=m;j++) x[i][j]=read();
    dp();
    printf("%lld",re);
}

