//CF1C
//给定三点的正多边形最小面积
//如果要求正多边形面积最小，明显正多边形的顶点都在给定三点构成的三角形外接圆上
#include<bits/stdc++.h>
using namespace std;
const double PI=acos(-1.0);        //π的值
const double eps=1E-2;            //控制精度
struct point
{
    double x,y;
} p[3];
double len[3],a[3];        //len为边长，a为圆心角角度。
double Get(int i,int j)      //求两点之间距离
{
    return sqrt((p[i].x-p[j].x)*(p[i].x-p[j].x)+(p[i].y-p[j].y)*(p[i].y-p[j].y));
}
double gcd(double a,double b)      //double类型的最大公约数
{
    if(fabs(b)<eps)
        return a;
    if(fabs(a)<eps)
        return b;
    return gcd(b,fmod(a,b));    //fmod(a,b), double类型的取模
}
int main()
{
    double t=0.0,A,r;
    for(int i=0; i<3; ++i)
        scanf("%lf%lf",&p[i].x,&p[i].y);
    for(int i=0; i<3; t+=len[i],++i)
        len[i]=Get(i,(i+1)%3);
    t/=2;
    A=sqrt(t*(t-len[0])*(t-len[1])*(t-len[2]));    //求三角形面积
    r=len[0]*len[1]*len[2]/(4*A);                //求三角形外接圆半径
    for(int i=0; i<2; ++i)
        a[i]=acos(1-len[i]*len[i]/(2*r*r));        //求圆心角度数
    a[2]=2*PI-a[0]-a[1];                        //为防止误差，最后一个圆心角根据三角形三边作为弦所对的三个圆心角之和为360°求出
    t=gcd(a[0],gcd(a[1],a[2]));                    //求圆心角的最大公约数
    printf("%.6lf",(PI*r*r*sin(t))/t);            //求正多边形面积
    return 0;
}
