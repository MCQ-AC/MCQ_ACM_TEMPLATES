/*题目描述
一个餐厅在相继的 N 天里,每天需用的餐巾数不尽相同。假设第 i 天需要 ri块餐巾( i=1,2,...,N)。餐厅可以购买新的餐巾,每块餐巾的费用为 p 分;或者把旧餐巾送到
快洗部,洗一块需 m 天,其费用为 f 分;或者送到慢洗部,洗一块需 n 天(n>m),其费用为 s 分(s<f)。
每天结束时,餐厅必须决定将多少块脏的餐巾送到快洗部,多少块餐巾送到慢洗部,以及多少块保存起来延期送洗。但是每天洗好的餐巾和购买的新餐巾数之和,要满足当天的需
求量。
试设计一个算法为餐厅合理地安排好N 天中餐巾使用计划,使总的花费最小。编程找出一个最佳餐巾使用计划。
输入格式
由标准输入提供输入数据。文件第 1 行有 1 个正整数 N，代表要安排餐巾使用计划的天数。
接下来的 N 行是餐厅在相继的 N 天里,每天需用的餐巾数。
最后一行包含5个正整数p,m,f,n,s。p 是每块新餐巾的费用; m 是快洗部洗一块餐巾需用天数; f 是快洗部洗一块餐巾需要的费用; n 是慢洗部洗一块餐巾需用天数; s 是
慢洗部洗一块餐巾需要的费用。
输出格式
将餐厅在相继的 N 天里使用餐巾的最小总花费输出
*/
/*这是一道最小费用（费用指单价）最大流的题目。
首先，我们拆点，将一天拆成晚上和早上，每天晚上会受到脏餐巾（来源：当天早上用完的餐巾，在这道题中可理解为从原点获得），每天早上又有干净的餐巾（来源：
购买、快洗店、慢洗店）。
1.从原点向每一天晚上连一条流量为当天所用餐巾x，费用为0的边，表示每天晚上从起点获得x条脏餐巾。
2.从每一天早上向汇点连一条流量为当天所用餐巾x，费用为0的边，每天白天,表示向汇点提供x条干净的餐巾,流满时表示第i天的餐巾够用 。 3.从每一天晚上向第二天晚上
连一条流量为INF，费用为0的边，表示每天晚上可以将脏餐巾留到第二天晚上（注意不是早上，因为脏餐巾在早上不可以使用）。
4.从每一天晚上向这一天+快洗所用天数t1的那一天早上连一条流量为INF，费用为快洗所用钱数的边，表示每天晚上可以送去快洗部,在地i+t1天早上收到餐巾 。
5.同理，从每一天晚上向这一天+慢洗所用天数t2的那一天早上连一条流量为INF，费用为慢洗所用钱数的边，表示每天晚上可以送去慢洗部,在地i+t2天早上收到餐巾 。
6.从起点向每一天早上连一条流量为INF，费用为购买餐巾所用钱数的边，表示每天早上可以购买餐巾 。 注意，以上6点需要建反向边！3~6点需要做判断（即连向的边必须
<=n）*/
#include<cstdio>
#include<queue>
#include<cstring>
#include<queue>
#include<algorithm>
#define INF 2147483647
#define LL long long
using namespace std;
queue<int> f;
int n,m,m1,t1,m2,t2,len=-1,st,ed;
struct node
{
    int x,y,c,d,next;
} a[100000];
int b[100000],last[100000],pre[100000],pos[100000],p[100000];
LL dis[100000];
bool bz[100000];
void ins(int x,int y,int c,int d)
{
    a[++len].x=x;
    a[len].y=y;
    a[len].c=c;
    a[len].d=d;
    a[len].next=last[x];
    last[x]=len;
    a[++len].x=y;
    a[len].y=x;
    a[len].c=0;
    a[len].d=-d;
    a[len].next=last[y];
    last[y]=len;
}
bool spfa()
{
    memset(bz,true,sizeof(bz));
    bz[st]=false;
    memset(dis,63,sizeof(dis));
    dis[st]=0;
    p[st]=INF;
    f.push(st);
    while(!f.empty())
    {
        int x=f.front();
        bz[x]=true;
        for(int i=last[x]; i>-1; i=a[i].next)
        {
            int y=a[i].y;
            if(a[i].c>0&&dis[y]>dis[x]+a[i].d)
            {
                dis[y]=dis[x]+a[i].d;
                pos[y]=x;
                pre[y]=i;
                p[y]=min(p[x],a[i].c);
                if(bz[y])
                {
                    f.push(y);
                    bz[y]=false;
                }
            }
        }
        f.pop();
    }
    return dis[ed]<4557430888798830399;
}
LL flow()
{
    LL ans=0;
    while(spfa())
    {
        ans+=p[ed]*dis[ed];
        for(int i=ed; i!=st; i=pos[i])
        {
            a[pre[i]].c-=p[ed];
            a[pre[i]^1].c+=p[ed];
        }
    }
    return ans;
}
int main()
{
    int x;
    scanf("%d",&n);
    st=0,ed=2*n+1;
    memset(last,-1,sizeof(last));
    for(int i=1; i<=n; i++)
    {
        scanf("%d",&x);
        ins(st,i,x,0);//每天晚上从起点获得x条脏餐巾
        ins(i+n,ed,x,0);//每天白天,向汇点提供x条干净的餐巾,流满时表示第i天的餐巾够用
    }
    scanf("%d %d %d %d %d",&m,&t1,&m1,&t2,&m2);
    for(int i=1; i<=n; i++)
    {
        if(i+1<=n) ins(i,i+1,INF,0);//每天晚上可以将脏餐巾留到第二天晚上
        if(i+t1<=n) ins(i,i+n+t1,INF,m1);//每天晚上可以送去快洗部,在地i+t1天早上收到餐巾
        if(i+t2<=n) ins(i,i+n+t2,INF,m2);//每天晚上可以送去慢洗部,在地i+t2天早上收到餐巾
        ins(st,i+n,INF,m);//每天早上可以购买餐巾
    }
    printf("%lld",flow());
}
