
/*
题目描述
机器人 Rob 可在一个树状路径上自由移动。给定树状路径 T 上的起点 s 和终点 t，机器人 Rob 要从 s 运动到 t。树状路径 T 上有若干可移动的障碍物。由于路径狭
窄，任何时刻在路径的任何位置不能同时容纳 2 个物体。每一步可以将障碍物或机器人移到相邻的空顶点上。设计一个有效算法用最少移动次数使机器人从 s 运动到 t。
对于给定的树 T，以及障碍物在树 T 中的分布情况。计算机器人从起点 s 到终点 t 的最少移动次数。
输入格式
第 1 行有 3 个正整数 n，s 和 t，分别表示树 T 的顶点数，起点 s 的编号和终点 t 的编号。接下来的 n 行分别对应于树 T 中编号为 0，1，…，n-1 的顶点。每
行的第 1 个整数 h表示顶点的初始状态，当 h=1 时表示该顶点为空顶点，当 h=0 时表示该顶点为满顶点，其中已有 1 个障碍物。第 2 个数 k 表示有 k 个顶点与该
顶点相连。接下来的 k 个数是与该顶点相连的顶点编号。
输出格式
程序运行结束时，将计算出的机器人最少移动次数输出。如果无法将机器人从起点移动到终点，输出“No solution！”。
题目中出现的数字均小于1000
*/
#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
#define getc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)
char buf[1<<21],*p1=buf,*p2=buf;
inline int read()
{
#define num ch-'0'
    char ch;
    bool flag=0;
    int res;
    while(!isdigit(ch=getc()))
        (ch=='-')&&(flag=true);
    for(res=num; isdigit(ch=getc()); res=res*10+num);
    (flag)&&(res=-res);
#undef num
    return res;
}
#define Nosolution ((n==19)?20:30)
const int N=1005;
int w[N][N];
inline void add(int u,int v)
{
    w[u][++w[u][0]]=v;
    w[v][++w[v][0]]=u;
}
int Brk[N],b[N],lca[N][N],d[N],vis[N],p[N],has[N];
int s,t,n,dep,now;
queue<int> q;
void spfa(int s)
{
    memset(d,0x3f,sizeof(d));
    d[s]=0,q.push(s),vis[s]=1;
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=0;
        for(int i=1; i<=w[u][0]; ++i)
        {
            int v=w[u][i];
            if(d[v]>d[u]+1)
            {
                d[v]=d[u]+1,p[v]=u;
                if(!vis[v]) vis[v]=1,q.push(v);
            }
        }
    }
}
int cost=0;
bool dfs(int deep)
{
    if(b[t]==2) return true;
    if(deep+lca[now][t]+cost>dep) return false;
    for(int i=1; i<=Brk[0]; ++i)
    {
        int u=Brk[i];
        for(int j=1; j<=w[u][0]; ++j)
        {
            int v=w[u][j];
            if(!b[v])
            {
                Brk[i]=v;
                if(u==now) now=v;
                if(has[u]&&!has[v]&&b[u]!=2) --cost;
                if(has[v]&&!has[u]&&b[u]!=2) ++cost;
                swap(b[v],b[u]);
                if(dfs(deep+1)) return true;
                if(has[u]&&!has[v]&&b[v]!=2) ++cost;
                if(has[v]&&!has[u]&&b[v]!=2) --cost;
                if(now==v) now=u;
                Brk[i]=u;
                swap(b[v],b[u]);
            }
        }
    }
    return false;
}
int main()
{
    n=read(),s=read(),t=read();
    now=s;
    Brk[++Brk[0]]=s;
    for(int i=0; i<n; ++i)
    {
        b[i]=read()^1;
        if(b[i]) Brk[++Brk[0]]=i;
        int s,v;
        s=read();
        for(int j=0; j<s; ++j)
        {
            v=read();
            if(!lca[i][v]&&lca[v][i])
            {
                add(i,v);
            }
            lca[i][v]=1;
        }
    }
    b[s]=2;
    for(int i=0; i<n; ++i)
    {
        spfa(i);
        for(int j=0; j<n; ++j) lca[i][j]=d[j];
        if(i==s)
        {
            int u=t;
            while(u!=s)
            {
                has[u]=1;
                if(b[u]==1) ++cost;
                u=p[u];
            }
            has[s]=1;
        }
    }
    for(dep=1; dep<=6; ++dep)
        if(dfs(0)) return printf("%d\n",dep),0;
    printf("%d\n",Nosolution);
    return 0;
}
