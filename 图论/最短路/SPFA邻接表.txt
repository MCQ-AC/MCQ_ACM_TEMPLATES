//<邻接表+判负权环 O(VE)>
/*
* 单源最短路 SPFA
* 时间复杂度 0(kE)
* 这个是队列实现，有时候改成栈实现会更加快，很容易修改
* 这个复杂度是不定的
*/
#include<bits/stdc++.h>
using namespace std;
const int N=1000010;
const int inf=0x3f3f3f3f;
struct node
{
    int v,w;
    node(int _v=0,int _w=0):v(_v),w(_w) {}
};
vector<node> eg[N];
void add(int u,int v,int w)
{
    eg[u].push_back(node(v,w));
}
bool vis[N];//在队列标志
int cnt[N];//每个点的入队列次数
int dis[N];
bool SPFA(int sta,int n)
{
    memset(vis,false,sizeof(vis));
    for(int i=1; i<=n; i++)dis[i]=inf;
    vis[sta]=true;
    dis[sta]=0;
    queue<int> q;
    q.push(sta);
    memset(cnt,0,sizeof(cnt));
    cnt[sta]=1;
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        vis[u]=false;
        for(int i=0; i<eg[u].size(); i++)
        {
            int v=eg[u][i].v;
            if(dis[v]>dis[u]+eg[u][i].w)
            {
                dis[v]=dis[u]+eg[u][i].w;
                if(!vis[v])
                {
                    vis[v]=true;
                    q.push(v);
                    if(++cnt[v]>n)return false;//cnt[i] 为入队列次数，用来判定是否存在负环回路
                }
            }
        }
    }
    return true;
}
void init()
{
    for(int i=0;i<N;i++)
    {
        eg[i].clear();
    }
}
int main()
{
    return 0;
}
