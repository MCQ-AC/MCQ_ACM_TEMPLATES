//num数组:s到d的最短路的条数,weight数组:点权,w数组:s到d的最大权值和，pre数组记录路径
#include <iostream>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;
const int INF=0x3f3f3f3f;
const int MAXN=30010;
struct qnode
{
    int v;
    int c;
    qnode(int _v=0,int _c=0):v(_v),c(_c) {}
    bool operator <(const qnode &r)const
    {
        return c>r.c;
    }
};
struct edge
{
    int v,cost;
    int next;
};
edge eg[200000];
int head[MAXN],dist[MAXN],tot,num[MAXN],w[MAXN],weight[MAXN];
bool vis[MAXN];
void Dijkstra(int n,int sta)//点的编号从1开始
{
    memset(vis,false,sizeof(vis));
    for(int i=1; i<=n; i++)   dist[i]=INF;
    priority_queue<qnode> pq;
    dist[sta]=0;
    pq.push(qnode(sta,0));
    qnode tmp;
    num[sta]=1;
    w[sta]=weight[sta];
    while(!pq.empty())
    {
        tmp=pq.top();
        pq.pop();
        int u=tmp.v;
        if(vis[u])continue;
        vis[u]=true;
        for(int i=head[u]; ~i; i=eg[i].next)
        {
            int v=eg[i].v;
            int cost=eg[i].cost;
            if(!vis[v]&&dist[v]>dist[u]+cost)
            {
                dist[v]=dist[u]+cost;
                num[v]=num[u];
                w[v]=w[u]+weight[v];
                pq.push(qnode(v,dist[v]));
            }
            else if(!vis[v]&&dist[v]==dist[u]+cost)
            {
                if(w[u]+weight[v]>w[v])
                    w[v]=w[u]+weight[v];
                num[v]+=num[u];
            }
        }
    }
}
void init()
{
    memset(weight,0,sizeof(weight));
    memset(head,-1,sizeof(head));
    memset(num,0,sizeof(num));
    tot=0;
}
void addedge(int u,int v,int w)
{
    eg[tot].v=v;
    eg[tot].cost=w;
    eg[tot].next=head[u];
    head[u]=tot++;
}
int main()
{
    int n,m,s,e;
    init();
    scanf("%d%d%d%d",&n,&m,&s,&e);
    for(int i=1; i<=n; i++)
        scanf("%d",&weight[i]);
    for(int i=0; i<m; i++)
    {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        addedge(u+1,v+1,w);//pat1003下标是从0开始
        addedge(v+1,u+1,w);
    }
    Dijkstra(n,s+1);
    printf("%d %d\n",num[e+1],w[e+1]);
    return 0;
}
