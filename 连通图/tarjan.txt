/* POJ 1236
题意：有n台电脑，现在有些电脑可以传数据到另外的电脑上，即有k条边。问题1：现在问至少需要给多少台电脑传送数据才能到达全部电脑。问题2：问至少添加多少条边才能使得往任意一台电脑传送数据便可以到达所有电脑。
思路：问题1可以转化为求入度为0的缩点个数，问题2可以转换为求max(入度为0的点个数，出度为0的点个数），因为tarjan后图变成一个DAG，要将该DAG变为一个强连通，那么最少连边就考虑吧那些出度零点连一条边到入度零点。所以答案就是在入度零点和出度零点中找最大值。先用tarjan求出强连通和缩点，如果scc为1，则输出1 0；否则照上述思路写。
*/
/*
* Tarjan 算法
* 复杂度 O(N+M)
*/
#include<iostream>
#include<cstring>
using namespace std;
const int maxn = 20010;//点数
const int maxm = 50010;//边数
struct Edge
{
    int to,next;
} edge[maxm];
int head[maxn],tot;
int low[maxn],dfn[maxn],Stack[maxn],belong[maxn];//belong 数组的值是1~scc
int index,top;
int scc;//强连通分量的个数
bool inStack[maxn];
int num[maxn];//各个强连通分量包含点的个数，数组编号 1 ~ scc
//num 数组不一定需要，结合实际情况
void addedge(int u,int v)
{
    edge[tot].to = v;
    edge[tot].next = head[u];
    head[u] = tot++;
}
void tajan(int u)
{
    int v;
    low[u] = dfn[u] = ++index;
    Stack[top++] = u;
    inStack[u] = true;
    for(int i = head[u]; i != - 1; i = edge[i].next)
    {
        v = edge[i].to;
        if( !dfn[v] )
        {
            tajan(v);
            if( low[u] > low[v] )low[u] = low[v];
        }
        else if(inStack[v] && low[u] > dfn[v])
            low[u] = dfn[v];
    }
    if(low[u] == dfn[u])
    {
        scc++;
        do
        {
            v = Stack[ -- top];
            inStack[v] = false;
            belong[v] = scc;
            num[scc]++;
        }
        while( v != u);
    }
}
void solve(int N)
{
    memset(dfn,0,sizeof(dfn));
    memset(inStack,false,sizeof(inStack));
    memset(num,0,sizeof(num));
    index = scc = top = 0;
    for(int i = 1; i <= N; i++)
        if(!dfn[i])
            tajan(i);
}
void init()
{
    tot = 0;
    memset(head, - 1,sizeof(head));
}
int main()
{
    int n;
    while(cin>>n)
    {
        int in[maxn],out[maxn];
        memset(in,0,sizeof(in));
        memset(out,0,sizeof(out));
        init();
        for(int i=1;i<=n;i++)
        {
            int a;
            while(cin>>a&&a)
                addedge(i,a);
        }
        solve(n);
        if(scc==1)
        {
            cout<<1<<endl<<0<<endl;
            continue;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=head[i];~j;j=edge[j].next)
            {
                if(belong[i]!=belong[edge[j].to])
                {
                    in[belong[edge[j].to]]++;
                    out[belong[i]]++;
                }
            }
        }
        int ans1=0,ans2=0;
        for(int i=1;i<=scc;i++)
        {
            if(in[i]==0)
                ans1++;
        }
        for(int i=1;i<=scc;i++)
        {
            if(out[i]==0)
                ans2++;
        }
        ans2=max(ans1,ans2);
        cout<<ans1<<endl<<ans2<<endl;
    }
}
