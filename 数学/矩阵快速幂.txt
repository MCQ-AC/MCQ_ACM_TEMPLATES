/*例如
(1) fn=f(n-1)+f(n-2),矩阵递推式为1 1 * f(n-1) = fn
				 1 0   f(n-2)   fn-1
(2)f(n)=a*f(n-1)+b*f(n-2)+c,矩阵递推式为a b 1 * fn-1 = fn
				 	1 0 0   fn-2   fn-1
					0 0 1   C      C
(3)f(n)=c^n-f(n-1),矩阵递推式为 -1 c * fn-1   = fn
				 0 c   c^(n-1)  c^n
*/
#include<bits/stdc++.h>
using namespace std;
#define mod 7
#define ll long long
int n=2;                                //方阵的行列数
struct Matrix
{
    ll m[105][105];                  //矩阵结构体
};
Matrix operator*(Matrix a,Matrix b)                   //模拟矩阵乘法
{
    Matrix c;
    memset(c.m,0,sizeof(c.m));
    for(int i=1; i<=n; i++)
        for(int j=1; j<=n; j++)
            for(int k=1; k<=n; k++)
                c.m[i][j]=(c.m[i][j]+a.m[i][k]*b.m[k][j]+mod)%mod;
    return c;
}
Matrix operator^(Matrix a,int b)                        //快速幂 矩阵a的b次方
{
    Matrix c;
    memset(c.m,0,sizeof(c.m));
    for(int i=1; i<=n; i++)                            //初始化为单位矩阵
        c.m[i][i]=1;
    while(b)
    {
        if(b&1)
            c=c*a;                                       //快速幂
        a=a*a;
        b>>=1;
    }
    return c;
}
int main()
{
    int a,b,c;
    std::ios::sync_with_stdio(false);
    while(cin>>a>>b>>c)
    {
        if(!a) break;
        if(c<3)
            cout<<1<<endl;
        else
        {
            Matrix M;
            M.m[1][1]=a,M.m[1][2]=b,M.m[2][1]=1,M.m[2][2]=0;
            Matrix ans=M^(c-2);
            cout<<(ans.m[1][1]+ans.m[1][2])%mod<<endl;
        }
    }
    return 0;
}
