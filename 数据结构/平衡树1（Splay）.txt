/*
洛谷p3369
维护一些数，其中需要提供以下操作：
1.插入x数
2.删除x数(若有多个相同的数，因只删除一个)
3.查询x数的排名(排名定义为比当前数小的数的个数+1。若有多个相同的数，因输出最小的排名)
4.查询排名为x的数
5.求x的前驱(前驱定义为小于x，且最大的数)
6.求x的后继(后继定义为大于x，且最小的数)
*/
/*
f[i]:i节点的父节点,cnt[i]每个点出现的次数,ch[i][0/1]:0表示左孩子，1表示右孩子, size[i]表示以i为根节点的子树的节点个数
key[i]表示点i代表的数的值；sz为整棵树的节点个数，rt表示根节点
*/
#include<bits/stdc++.h>
using namespace std;
const int N=1e6+5;

int f[N],cnt[N],ch[N][2],sz[N],key[N],tot,rt;

void clear(int x)
{
    f[x]=cnt[x]=ch[x][0]=ch[x][1]=sz[x]=key[x]=0;
}

bool get(int x)
{
    return ch[f[x]][1]==x;
}

void pushup(int x)
{
    if(x)
    {
        sz[x]=cnt[x];
        if (ch[x][0]) sz[x]+=sz[ch[x][0]];
        if (ch[x][1]) sz[x]+=sz[ch[x][1]];
    }
}

void rotate(int x)
{
    int old=f[x],oldf=f[old],which=get(x);
    ch[old][which]=ch[x][which^1];
    f[ch[old][which]]=old;  //这两句的意思是：
    //我的儿子过继给我的爸爸；同时处理父子两个方向上的信息
    ch[x][which^1]=old;
    f[old]=x;
    //我给我爸爸当爹，我爸爸管我叫爸爸
    f[x]=oldf;//我的爷爷成了我的爸爸
    if (oldf) ch[oldf][ch[oldf][1]==old]=x;
    pushup(old);
    pushup(x);//分别维护信息
}

void splay(int x)
{
    for (int fa; fa=f[x]; rotate(x))
        if (f[fa])
            rotate((get(x)==get(fa))?fa:x);//如果祖父三代连城一条线，就要从祖父哪里rotate
    rt=x;
}

void insert(int x)//x为权值
{
    if (rt==0)
    {
        tot++;
        key[tot]=x;
        rt=tot;
        cnt[tot]=sz[tot]=1;
        f[tot]=ch[tot][0]=ch[tot][1]=0;
        return;
    }
    int now=rt,fa=0;
    while (1)
    {
        if (x==key[now])//这个数在树中已经出现了
        {
            cnt[now]++;
            pushup(now);
            pushup(fa);
            splay(now);
            return;
        }
        fa=now;
        now=ch[now][key[now]<x];
        if (now==0)
        {
            tot++;
            sz[tot]=cnt[tot]=1;
            ch[tot][0]=ch[tot][1]=0;
            ch[fa][x>key[fa]]=tot;//根据加入点的顺序重新标号
            f[tot]=fa;
            key[tot]=x;
            pushup(fa);
            splay(tot);
            return;
        }
    }
}

int rk(int x)//查询x的排名
{
    int now=rt,ans=0;
    while (1)
    {
        if (x<key[now]) now=ch[now][0];
        else
        {
            ans+=sz[ch[now][0]];
            if (x==key[now])
            {
                //此时x和树中的点重合，树中不允许有两个相同的点
                splay(now);
                return ans+1;
            }
            ans+=cnt[now];
            now=ch[now][1];//到达右孩子处
        }
    }
}

int kth(int x)
{
    //查询排名为x的数
    int now=rt;
    while (1)
    {
        if (ch[now][0] && x<=sz[ch[now][0]])
            now=ch[now][0];
        else
        {
            int temp=sz[ch[now][0]]+cnt[now];
            if (x<=temp)
                return key[now];
            x-=temp;
            now=ch[now][1];
        }
    }
}

int pre()//由于进行splay后，x已经到了根节点的位置
{
    //所以只要寻找左右子树最左边（或最右边的）数
    int now=ch[rt][0];
    while (ch[now][1]) now=ch[now][1];
    return now;
}

int next()
{
    int now=ch[rt][1];
    while (ch[now][0]) now=ch[now][0];
    return now;
}

void del(int x)
{
    rk(x);
    if (cnt[rt]>1)
    {
        cnt[rt]--;    //有多个相同的数
        pushup(rt);
        return;
    }
    if (!ch[rt][0] && !ch[rt][1])
    {
        clear(rt);
        rt=0;
        return;
    }
    if (!ch[rt][0])
    {
        int oldrt=rt;
        rt=ch[rt][1];
        f[rt]=0;
        clear(oldrt);
        return;
    }
    else if (!ch[rt][1])
    {
        int oldrt=rt;
        rt=ch[rt][0];
        f[rt]=0;
        clear(oldrt);
        return;
    }
    int oldrt=rt;
    int leftbig=pre();
    splay(leftbig);
    ch[rt][1]=ch[oldrt][1];
    f[ch[oldrt][1]]=rt;
    clear(oldrt);
    pushup(rt);
}

int main()
{
    int n;
    scanf("%d",&n);
    for (int i=1; i<=n; i++)
    {
        int op,k;
        scanf("%d%d",&op,&k);
        if (op==1) insert(k);
        if (op==2) del(k);
        if (op==3) printf("%d\n",rk(k));
        if (op==4) printf("%d\n",kth(k));
        if (op==5)
        {
            insert(k);
            printf("%d\n",key[pre()]);
            del(k);
        }
        if (op==6)
        {
            insert(k);
            printf("%d\n",key[next()]);
            del(k);
        }
    }
}
