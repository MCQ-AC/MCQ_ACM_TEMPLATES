/*
s(n,m)=âˆ‘C(n,i) (i=0~m)
s(n,m)=s(n,m-1)+c(n,m)
s(n,m)=s(n,m+1)-c(n,m+1)
s(n,m)=2*s(n-1,m)-c(n-1,m)
s(n,m)=(s(n+1,m)+c(n,m))/2
*/
#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N=1e5+5;
const int mod=1e9+7;

struct node
{
    int l,r,block,id;
} q[N<<2];
ll inv[N],fac[N],ans[N];
int blocks;

bool cmp(node a,node b)
{
    if (a.block!=b.block) return a.l<b.l;
    if (a.block&1) return a.r<b.r;
    return a.r>b.r;
}

void init()
{
    fac[1]=fac[0]=1;
    inv[1]=inv[0]=1;
    for(int i=2; i<N; i++)
    {
        fac[i]=fac[i-1]*i%mod;
        inv[i]=(mod-mod/i)*inv[mod%i]%mod;
    }
    for(int i=2; i<N; i++)
        inv[i]=inv[i-1]*inv[i]%mod;
}

ll C(int x,int y)
{
    if (y>x) return 0;
    return fac[x]*inv[y]%mod*inv[x-y]%mod;
}

int main()
{
    init();
    ios::sync_with_stdio(false);
    int t;
    cin>>t;
    blocks=sqrt(t)+1;
    for(int i=1; i<=t; i++)
    {
        int n,m;
        cin>>n>>m;
        q[i]=node{n,m,n/blocks,i};
    }
    sort(q+1,q+t+1,cmp);
    int l=1,r=0,res=1;
    for(int i=1; i<=t; i++)
    {
        while(l<q[i].l)
        {
            res=res*2%mod-C(l,r);
            if (res<0) res+=mod;
            l++;
        }
        while(l>q[i].l)
        {
            l--;
            res=(res+C(l,r))%mod*inv[2]%mod;
        }
        while(r<q[i].r)
        {
            r++;
            res=(res+C(l,r))%mod;
        }
        while(r>q[i].r)
        {
            res=(res-C(l,r)+mod)%mod;
            r--;
        }
        ans[q[i].id]=res;
    }
    for(int i=1; i<=t; i++)
        cout<<ans[i]<<endl;
    return 0;
}
