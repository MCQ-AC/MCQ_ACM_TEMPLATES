//poj3580
给出一个数字序列，有6种操作：

　　　　（1） ADD x y d： 第x个数到第y个数加d 。

　　　　（2） REVERSE x y ： 将区间[x,y]中的数翻转 。

　　　　（3） REVOLVE x y t ：将区间[x,y]旋转t次，如1 2 3 4 5 旋转2次后就变成4 5 1 2 3 。

　　　　（4） INSERT x p ：在第x个数后面插入p 。

　　　　（5）DELETE x ：删除第x个数 。

　　　　（6） MIN x y ： 查询区间[x,y]中的最小值 。

就是区间加，翻转，剪切，询问最值。点插入，删除。这几个操作
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e5 + 7;
const int inf = 1e9;
int n, m;
int ch[N][2]; //0做孩子， 1右孩子
int f[N]; //每个节点的父亲
int sz[N]; //每个节点为根子树的大小
int val[N]; //这个节点所表示的值
int cnt[N]; //这个节点所表示值的数量
int mi[N]; //这个节点子树的最小值
int rev[N]; //反转标记
int lazy[N]; //延迟标记
int root;  // splay的根
int tot; //树所有的节点数量
void update_rev(int x) //更新反转
{
    if(!x) return;
    swap(ch[x][0], ch[x][1]);
    rev[x] ^= 1;  //如果这一层曾经被转过下面就不用转了， 把rev取消了
}
void update_add(int x, int v)
{
    if(x) lazy[x] += v, val[x] += v, mi[x] += v;
}
void newnode(int rt, int v, int fa)
{
    f[rt] = fa;
    sz[rt] = 1;
    val[rt] = mi[rt] = v;
    ch[rt][0] = ch[rt][1] = rev[rt] = lazy[rt] = 0; //加点的时候把所有的信息都更新了
}
void delnode(int rt) //为了回收空间，其实没什么太大的用处
{
    f[rt] = val[rt] = sz[rt] = mi[rt] = 0;
    ch[rt][0] = ch[rt][1] = rev[rt] = lazy[rt] = 0;
}
void pushup(int x)  //跟线段树一样，从下往上不断更新
{
    if(!x)return ;
    sz[x] = 1, mi[x] = val[x];
    if(ch[x][0]) sz[x] += sz[ch[x][0]], mi[x]= min(mi[x],mi[ch[x][0]]); //更新个数跟当前子树最小值
    if(ch[x][1]) sz[x] += sz[ch[x][1]], mi[x]= min(mi[x],mi[ch[x][1]]);
}
void pushdown(int x) //向下传递lazy 跟 rev
{
    if(!x) return;
    if(lazy[x])
    {
        update_add(ch[x][0], lazy[x]);
        update_add(ch[x][1], lazy[x]);
        lazy[x] = 0;
    }
    if(rev[x])
    {
        update_rev(ch[x][0]);
        update_rev(ch[x][1]);
        rev[x] = 0;
    }
}
void build(int &rt, int l, int r, int fa) //rt是节点编号，节点的大小代表了两个数位置的相对顺序
{
    //一共tot个节点
    if(l > r) return;
    int mid = (r+l) >> 1;
    rt = mid;
    newnode(rt, val[rt], fa);
    build(ch[rt][0], l, mid-1, rt);
    build(ch[rt][1], mid+1, r, rt);
    pushup(rt);
}
void Rotate(int x, int k) // k = 0左旋， k = 1右旋
{
    int y = f[x];
    int z = f[y];
    pushdown(y);
    pushdown(x);
    ch[y][!k] = ch[x][k];
    if(ch[x][k]) f[ch[x][k]] = y;
    f[x] = z;
    if(z) ch[z][ch[z][1]==y] = x;
    f[y] = x;
    ch[x][k] = y;
    pushup(y), pushup(x);
}
void splay(int x, int goal)
{
    pushdown(x);
    while(f[x] != goal)
    {
        int y = f[x], z = f[y];
        //在这里下传翻转标记，在rotate里下传标记可能会使树形改变导致旋转出错
        pushdown(z);
        pushdown(y);
        pushdown(x);
        if(f[y] == goal) Rotate(x, ch[y][0] == x);
        else
        {
            int p = ch[f[y]][0] == y;
            if(ch[y][p] == x) Rotate(x, !p), Rotate(x, p);
            else Rotate(y, p), Rotate(x, p);
        }
    }
    pushup(x);
    if(goal == 0) root = x;
}

//以x为根的子树 的极值点  0 极小 1 极大
int extreme(int x,int k)
{
    while(ch[x][k]) x = ch[x][k];
    splay(x, 0);  //所有操作之后都伸展下
    return x;
}
//以节点编号x为根的子树 第k个数的节点编号
int kth(int x,int k)
{
    pushdown(x);
    if(sz[ch[x][0]]+1 == k) return x;
    else if(sz[ch[x][0]] >= k) return kth(ch[x][0],k);
    else return kth(ch[x][1], k-sz[ch[x][0]]-1);
}
//区间交换
void exchange(int l1,int r1,int l2,int r2)
{
    int x = kth(root, l2-1), y = kth(root, r2+1);
    splay(x,0), splay(y,x);
    int tmp_right = ch[y][0];
    ch[y][0]=0; //“剪贴下来”
    x = kth(root, l1-1),y = kth(root, l1);
    splay(x,0), splay(y,x);
    ch[y][0] = tmp_right;
    f[tmp_right] = y;
}
//区间翻转
void reversal(int l,int r)
{
    int x = kth(root,l-1),y = kth(root,r+1);
    splay(x,0);
    splay(y,x);
    update_rev(ch[y][0]);  //ch[y][0]就是l-r区间
}
//区间加
void add(int l,int r,int v)
{
    int x = kth(root,l-1), y = kth(root,r+1);
//    cout << 1 <<endl;
    splay(x,0);
    splay(y,x);
    update_add(ch[y][0],v); //ch[y][0]就是l-r区间
}
//在第k个数后插入值为x的节点
void Insert(int k,int x)
{
    int r = kth(root, k),rr = kth(root, k+1);
    splay(r,0), splay(rr,r);
    newnode(++tot, x, rr);
    ch[rr][0] = tot; //节点个数增加
    for(r = rr; r ; r = f[r]) pushdown(r), pushup(r);
    splay(rr,0);
}
//删除第k位置的数
void Delete(int k)
{
    splay(kth(root,k-1), 0);
    splay(kth(root,k+1), root);
    delnode(ch[ch[root][1]][0]);
    ch[ch[root][1]][0] = 0;
    pushup(ch[root][1]);
    pushup(root);
}
// 获取区间最大值
//int get_max(int l,int r)
//{
//    int x = kth(root,l-1), y = kth(root,r+1);
//    splay(x,0); splay(y,x);
//    return mx[ch[y][0]];
//}
//获取区间最小值
int get_min(int l,int r)
{
    int x = kth(root,l-1), y = kth(root,r+1);
    splay(x,0);
    splay(y,x);
    return mi[ch[y][0]];
}
void init(int n)
{
    root = 0;
    //不断更新的， 不断插入的， 需要一个tot记录插入节点的编号
//    tot = 0;
//    newnode(++tot, -INF, 0);
//    newnode(++tot, INF, root);
//    ch[root][1] = tot;
    f[0] = sz[0] = ch[0][0] = ch[0][1] = rev[0] = lazy[0] = 0; //rt编号多加两个，处理区间[1,n]
    build(root, 1, n, 0);
    pushup(root);
}
char s[12];
int main()
{
    scanf("%d", &n);
    val[1] = val[n+2] = inf; //多加两个编号0,n+1， 把区间1-n包起来
    for(int i = 2; i <= n+1; i++) scanf("%d", &val[i]);
    tot = n+2;
    init(n+2);
    scanf("%d",&m);
    for(int i = 1; i <= m; i++)
    {
        int d, l, r;
        scanf(" %s",s);
        if(s[0]=='A')
        {
            //ADD
            scanf("%d%d%d", &l, &r, &d);
            add(l+1,r+1,d);
        }
        else if(s[0]=='I')
        {
            //INSERT
            scanf("%d%d",&l,&d);
            Insert(l+1,d);
        }
        else if(s[0]=='M')
        {
            //MIN
            scanf("%d%d",&l,&r);
            printf("%d\n",get_min(l+1,r+1));
        }
        else if(s[0]=='D')
        {
            //DELETE
            scanf("%d",&l);
            Delete(l+1);
        }
        else if(s[3]=='E')
        {
            //REVERSE
            scanf("%d%d",&l,&r);
            reversal(l+1, r+1); //增加了1一个节点全体后移一个
        }
        else
        {
            //REVOLVE
            scanf("%d%d%d",&l,&r,&d);
            d = d % (r-l+1);
            if(d) exchange(l +1,r-d +1,r-d+1 +1,r +1);
        }
    }
    return 0;
}
