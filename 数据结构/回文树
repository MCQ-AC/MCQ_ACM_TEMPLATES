//1.求一个字符串中所有回文字串的出现次数与长度乘积的最大值。（洛谷p3649）
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    int next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    int cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
}pt ;
int main()
{
    char s[N];
    cin>>s;
    int l=strlen(s);
    pt.init();
    for(int i=0;i<l;i++)
    {
        pt.add(s[i]);
    }
    pt.count();
    ll ans=0;
    for(int i=2;i<pt.p;i++)
    {
        ans=max(ans,(ll)pt.cnt[i]*pt.len[i]);
    }
    cout<<ans<<endl;
    return 0;
}

//2.求一个字符串的每个前缀的回文子串数（ural1960）
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    int next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    int cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
}pt ;
int main()
{
    char s[N];
    cin>>s;
    int l=strlen(s);
    pt.init();
    for(int i=0;i<l;i++)
    {
        pt.add(s[i]);
        cout<<pt.p-2<<" ";
    }
    cout<<endl;
    return 0;
}

//3.两个串a、b，问对a的每个回文子串，b中和该子串相同的子串个数之和
#include<bits/stdc++.h>
using namespace std;
const int N = (3e5+5)*2 ;
const int M = 26 ;
#define ll long long
struct PT
{
    ll next[N][M] ;//next指针，next指针和字典树类似，指向的串为当前串两端加上同一个字符构成
    int fail[N] ;//fail指针，失配后跳转到fail指针指向的节点
    ll cnt[N] ; //cnt[i]表示i表示的回文字符串在整个字符串中出现了多少次（建树时求出的不是完全的，最后count()函数跑一遍以后才是正确的）
    int num[N] ; //num[i]表示i表示的回文字符串中有多少个本质不同的字符串（包括本身）
    int len[N] ;//len[i]表示节点i表示的回文串的长度（一个节点表示一个回文串）
    int S[N] ;//存放添加的字符
    int last ;//指向新添加一个字母后所形成的最长回文串表示的节点。
    int n ;//表示添加的字符个数。
    int p ;//表示添加的节点个数。

    int newnode ( int l )  //新建节点
    {
        for ( int i = 0 ; i < M ; ++ i ) next[p][i] = 0 ;
        cnt[p] = 0 ;
        num[p] = 0 ;
        len[p] = l ;
        return p ++ ;
    }

    void init ()  //初始化
    {
        p = 0 ;
        newnode (  0 ) ;//0表示偶数长度串的根
        newnode ( -1 ) ;//1表示奇数长度串的根
        last = 0 ;
        n = 0 ;
        S[n] = -1 ;//开头放一个字符集中没有的字符，减少特判
        fail[0] = 1 ;
    }

    int get_fail ( int x )  //和KMP一样，失配后找一个尽量最长的
    {
        while ( S[n - len[x] - 1] != S[n] ) x = fail[x] ;
        return x ;
    }

    void add ( int c )
    {
        c -= 'a' ;
        S[++ n] = c ;
        int cur = get_fail ( last ) ;//通过上一个回文串找这个回文串的匹配位置
        if ( !next[cur][c] )  //如果这个回文串没有出现过，说明出现了一个新的本质不同的回文串
        {
            int now = newnode ( len[cur] + 2 ) ;//新建节点
            fail[now] = next[get_fail ( fail[cur] )][c] ;//和AC自动机一样建立fail指针，以便失配后跳转
            next[cur][c] = now ;
            num[now] = num[fail[now]] + 1 ;
        }
        last = next[cur][c] ;
        cnt[last] ++ ;
    }

    void count ()
    {
        for ( int i = p - 1 ; i >= 0 ; -- i ) cnt[fail[i]] += cnt[i] ;
        //父亲累加儿子的cnt，因为如果fail[v]=u，则u一定是v的子回文串！
    }
} p1,p2 ;
ll dfs(ll u,ll v)
{
    ll res=0;
    for(int i=0;i<M;i++)
    {
        if(p1.next[u][i]!=0&&p2.next[v][i]!=0)
        {
            res+=(p1.cnt[p1.next[u][i]]*p2.cnt[p2.next[v][i]]+dfs(p1.next[u][i],p2.next[v][i]));
        }
    }
    return res;
}
int main()
{
    ios::sync_with_stdio(false);
    int t,cas=0;
    cin>>t;
    while(t--)
    {
        char a[N],b[N];
        cin>>a>>b;
        int la=strlen(a),lb=strlen(b);
        p1.init(),p2.init();
        for(int i=0;i<la;i++)
            p1.add(a[i]);
        for(int i=0;i<lb;i++)
            p2.add(b[i]);
        p1.count(),p2.count();
        ll ans=0;
        ans=dfs(0,0)+dfs(1,1);
        printf("Case #%d: %lld\n",++cas,ans);
    }

    return 0;
}

