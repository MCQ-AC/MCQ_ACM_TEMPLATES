//hdu4417 查询闭区间内点权小于等于z的点数，下标从0开始
#include<cstdio>
#include<cstring>
#include<algorithm>
#define mid (l+r)/2
using namespace std;

const int N = 200010;
int n, q, sz, num = 0;
int a[N], b[N], T[N];
int sum[N<<5], L[N<<5], R[N<<5];

inline int build(int l, int r)
{
    int rt = ++ num;
    sum[rt] = 0;
    if (l < r)
    {
        L[rt] = build(l, mid);
        R[rt] = build(mid+1, r);
    }
    return rt;
}

inline int update(int pre, int l, int r, int x)
{
    int rt = ++ num;
    L[rt] = L[pre];
    R[rt] = R[pre];
    sum[rt] = sum[pre]+1;
    if (l < r)
    {
        if (x <= mid) L[rt] = update(L[pre], l, mid, x);
        else R[rt] = update(R[pre], mid+1, r, x);
    }
    return rt;
}

inline int query(int u, int v, int l, int r, int k)
{
    if(r<=k)
        return sum[v]-sum[u];
    int ans=0;
    ans+=query(L[u], L[v], l, mid, k);
    if(k>mid)
        ans+=query(R[u], R[v], mid+1, r, k);
    return ans;
}

int main()
{
    int cas;
    scanf("%d",&cas);
    for(int cs=1; cs<=cas; cs++)
    {
        printf("Case %d:\n",cs);
        scanf("%d%d", &n, &q);
        for (int i = 1; i <= n; i ++)
        {
            scanf("%d", &a[i]);
            b[i] = a[i];
        }
        sort(b+1, b+1+n);
        sz = unique(b+1, b+1+n)-b-1;
        T[0] = build(1, sz);
        for (int i = 1; i <= n; i ++)
        {
            int t = lower_bound(b+1, b+1+sz, a[i])-b;
            T[i] = update(T[i-1], 1, sz, t);
        }
        while (q --)
        {
            int x, y, z;
            scanf("%d%d%d", &x, &y, &z);
            x++,y++;
            int k=upper_bound(b+1,b+1+sz,z)-b-1;
            int ans;
            if(k==0)
                ans=0;
            else
                ans = query(T[x-1], T[y], 1, sz, k);
            printf("%d\n", ans);
        }
    }

    return 0;
}
